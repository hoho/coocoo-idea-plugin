/* The following code was generated by JFlex 1.4.3 on 2/17/14 4:34 PM */

package com.hoho.coocoo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.coocoo.psi.CoocooTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/17/14 4:34 PM from the specification file
 * <tt>/Users/hoho/Work/coocooPlugin/src/com/hoho/coocoo/Coocoo.flex</tt>
 */
abstract class _CoocooLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GETTER = 8;
  public static final int IN_JAVASCRIPT = 2;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int TYPE = 14;
  public static final int IN_BAD = 16;
  public static final int YYINITIAL = 0;
  public static final int AFTER = 6;
  public static final int NAME = 12;
  public static final int CLASS = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\1\0\1\47\2\0\1\10\1\54\1\55\1\0\1\44\3\0\1\43"+
    "\12\5\2\0\1\51\1\0\1\52\1\53\1\50\1\31\1\35\1\16"+
    "\1\13\1\14\1\37\1\33\1\26\1\20\1\41\1\34\1\15\1\11"+
    "\1\21\1\12\1\27\1\42\1\24\1\32\1\17\1\25\1\22\1\23"+
    "\1\40\1\30\1\36\1\45\1\7\1\46\1\0\1\4\1\0\32\4"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\2\1\26\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\33\16\33\17\1\20\1\21\1\22\1\23\1\4"+
    "\1\24\3\25\2\0\1\26\3\0\3\4\1\27\54\4"+
    "\1\30\1\4\1\31\134\0\51\4\1\32\10\4\130\0"+
    "\5\4\1\27\14\4\1\33\20\4\3\0\1\16\34\0"+
    "\1\17\31\0\21\4\1\27\1\4\16\0\1\16\17\0"+
    "\1\17\1\0\14\4\24\0\4\4\4\0\3\4\4\0"+
    "\3\4\4\0\1\4\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[598];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u06a6\0\u019e\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u06a6\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u019e\0\u10b6\0\u10e4\0\u1112\0\u06a6\0\u0256"+
    "\0\u019e\0\u1140\0\u0284\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u0228"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648"+
    "\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u0228\0\u1a0e\0\u1a3c\0\u0730"+
    "\0\u1a6a\0\u075e\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e"+
    "\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee"+
    "\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e"+
    "\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce"+
    "\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u0bae\0\u2252\0\u0bdc"+
    "\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532"+
    "\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2"+
    "\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812"+
    "\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982"+
    "\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2"+
    "\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06\0\u2c34\0\u2c62"+
    "\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2"+
    "\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42"+
    "\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2"+
    "\0\u30e0\0\u310e\0\u313c\0\u316a\0\u0228\0\u3198\0\u31c6\0\u31f4"+
    "\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336\0\u3364"+
    "\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6\0\u34d4"+
    "\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644"+
    "\0\u3672\0\u36a0\0\u0af6\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786"+
    "\0\u37b4\0\u37e2\0\u0844\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8"+
    "\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38"+
    "\0\u3a66\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8"+
    "\0\u3bd6\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18"+
    "\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u0f74\0\u3e5a"+
    "\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u0cc2\0\u3f9c"+
    "\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c"+
    "\0\u413a\0\u4168\0\u4196\0\u41c4\0\u41f2\0\u4220\0\u424e\0\u427c"+
    "\0\u42aa\0\u42d8\0\u4306\0\u4334\0\u4362\0\u4390\0\u43be\0\u43ec"+
    "\0\u441a\0\u4448\0\u4476\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u0228"+
    "\0\u455c\0\u458a\0\u45b8\0\u45e6\0\u4614\0\u4642\0\u4670\0\u469e"+
    "\0\u46cc\0\u46fa\0\u4728\0\u4756\0\u4784\0\u47b2\0\u47e0\0\u480e"+
    "\0\u483c\0\u486a\0\u4898\0\u48c6\0\u48f4\0\u4922\0\u4950\0\u497e"+
    "\0\u49ac\0\u49da\0\u4a08\0\u4a36\0\u4a64\0\u4a92\0\u4ac0\0\u4aee"+
    "\0\u4b1c\0\u4b4a\0\u4b78\0\u4ba6\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e"+
    "\0\u4c8c\0\u4cba\0\u4ce8\0\u4d16\0\u4d44\0\u4d72\0\u4da0\0\u4dce"+
    "\0\u4dfc\0\u4e2a\0\u4e58\0\u4e86\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e"+
    "\0\u4f6c\0\u4f9a\0\u4fc8\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae"+
    "\0\u50dc\0\u510a\0\u5138\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u521e"+
    "\0\u524c\0\u527a\0\u52a8\0\u52d6\0\u5304\0\u5332\0\u5360\0\u538e"+
    "\0\u53bc\0\u53ea\0\u5418\0\u5446\0\u5474\0\u54a2\0\u54d0\0\u54fe"+
    "\0\u552c\0\u555a\0\u5588\0\u55b6\0\u55e4\0\u5612\0\u5640\0\u566e"+
    "\0\u569c\0\u56ca\0\u56f8\0\u5726\0\u5754\0\u5782\0\u57b0\0\u57de"+
    "\0\u580c\0\u583a\0\u5868\0\u5896\0\u58c4\0\u58f2\0\u5920\0\u594e"+
    "\0\u597c\0\u59aa\0\u59d8\0\u5a06\0\u5a34\0\u5a62\0\u5a90\0\u5abe"+
    "\0\u5aec\0\u5b1a\0\u5b48\0\u5b76\0\u5ba4\0\u5bd2\0\u5c00\0\u5c2e"+
    "\0\u5c5c\0\u5c8a\0\u5cb8\0\u5ce6\0\u5d14\0\u5d42\0\u5d70\0\u5d9e"+
    "\0\u5dcc\0\u5dfa\0\u5e28\0\u5e56\0\u5e84\0\u5eb2\0\u5ee0\0\u5f0e"+
    "\0\u5f3c\0\u5f6a\0\u5f98\0\u5fc6\0\u5ff4\0\u6022\0\u6050\0\u607e"+
    "\0\u60ac\0\u60da\0\u6108\0\u6136\0\u6164\0\u6192\0\u61c0\0\u61ee"+
    "\0\u621c\0\u624a\0\u6278\0\u62a6\0\u62d4\0\u6302\0\u6330\0\u635e"+
    "\0\u638c\0\u63ba\0\u63e8\0\u6416\0\u6444\0\u6472\0\u64a0\0\u64ce"+
    "\0\u64fc\0\u652a\0\u6558\0\u6586\0\u65b4\0\u65e2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[598];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\1\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\15\1\30\1\31\1\32\1\33\1\34\1\35\1\15"+
    "\1\36\1\37\1\40\1\41\1\42\1\15\1\43\1\15"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\12\1\56\1\57\1\60\2\61\1\62"+
    "\2\60\1\63\1\60\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\60\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\60\1\103\1\104\1\60\1\105"+
    "\1\106\1\60\1\107\1\60\1\110\1\111\1\112\12\60"+
    "\1\113\2\114\1\115\2\113\1\116\1\113\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\113"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\113\1\136"+
    "\1\137\1\113\1\140\1\141\1\113\1\142\1\113\1\143"+
    "\1\144\1\145\12\113\1\12\2\13\1\14\37\12\1\46"+
    "\2\12\1\51\2\12\1\54\1\55\2\12\1\57\1\12"+
    "\2\13\1\14\1\146\4\12\32\146\1\46\11\12\1\57"+
    "\1\12\2\13\1\147\1\150\4\12\32\150\1\46\1\12"+
    "\1\50\1\51\1\52\1\53\4\12\1\57\1\12\2\13"+
    "\1\147\1\151\4\12\32\151\1\46\1\12\1\50\1\51"+
    "\1\52\1\53\4\12\1\57\1\12\2\13\1\147\1\15"+
    "\4\12\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\15\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\15\1\36\1\37\1\40\1\41\1\42\1\15\1\43"+
    "\1\15\1\152\1\45\1\46\7\12\1\153\1\12\1\57"+
    "\1\154\2\13\1\155\37\154\1\156\12\154\57\0\2\13"+
    "\56\0\1\14\37\0\1\157\16\0\2\15\3\0\32\15"+
    "\13\0\1\160\2\0\3\160\1\161\1\162\46\160\1\163"+
    "\2\0\4\163\1\164\1\161\45\163\4\0\2\15\3\0"+
    "\1\15\1\165\1\15\1\166\26\15\17\0\2\15\3\0"+
    "\6\15\1\167\1\15\1\170\15\15\1\171\3\15\17\0"+
    "\2\15\3\0\1\15\1\172\1\15\1\173\7\15\1\174"+
    "\4\15\1\175\3\15\1\176\5\15\17\0\2\15\3\0"+
    "\13\15\1\177\4\15\1\200\6\15\1\201\2\15\17\0"+
    "\2\15\3\0\1\15\1\202\30\15\17\0\2\15\3\0"+
    "\1\15\1\203\2\15\1\204\6\15\1\205\1\15\1\206"+
    "\2\15\1\207\11\15\17\0\2\15\3\0\1\15\1\210"+
    "\1\15\1\211\7\15\1\212\1\15\1\213\1\15\1\214"+
    "\12\15\17\0\2\15\3\0\10\15\1\215\21\15\17\0"+
    "\2\15\3\0\7\15\1\216\10\15\1\217\11\15\17\0"+
    "\2\15\3\0\15\15\1\220\14\15\17\0\2\15\3\0"+
    "\1\15\1\221\1\15\1\222\26\15\17\0\2\15\3\0"+
    "\10\15\1\223\2\15\1\224\16\15\17\0\2\15\3\0"+
    "\20\15\1\225\11\15\17\0\2\15\3\0\1\15\1\226"+
    "\11\15\1\227\4\15\1\230\11\15\17\0\2\15\3\0"+
    "\2\15\1\231\13\15\1\232\5\15\1\233\3\15\1\234"+
    "\1\15\17\0\2\15\3\0\3\15\1\235\1\15\1\236"+
    "\6\15\1\237\15\15\17\0\2\15\3\0\3\15\1\240"+
    "\26\15\17\0\2\15\3\0\3\15\1\241\26\15\17\0"+
    "\2\15\3\0\4\15\1\242\25\15\17\0\2\15\3\0"+
    "\1\15\1\243\5\15\1\244\22\15\17\0\2\15\3\0"+
    "\21\15\1\245\10\15\17\0\2\15\3\0\14\15\1\246"+
    "\15\15\56\0\1\247\13\0\2\61\56\0\1\62\37\0"+
    "\1\157\12\0\1\250\2\0\3\250\1\60\1\251\46\250"+
    "\1\252\2\0\4\252\1\253\1\60\45\252\12\0\1\254"+
    "\62\0\1\255\1\0\1\60\15\0\1\256\30\0\1\257"+
    "\1\0\1\260\7\0\1\261\4\0\1\262\3\0\1\263"+
    "\44\0\1\264\4\0\1\265\6\0\1\266\27\0\1\267"+
    "\55\0\1\270\2\0\1\271\6\0\1\272\1\0\1\273"+
    "\41\0\1\274\1\0\1\275\7\0\1\276\1\0\1\277"+
    "\1\0\1\300\46\0\1\301\65\0\1\302\52\0\1\303"+
    "\43\0\1\304\62\0\1\305\2\0\1\306\62\0\1\307"+
    "\36\0\1\310\16\0\1\311\37\0\1\312\13\0\1\313"+
    "\5\0\1\314\3\0\1\315\30\0\1\316\1\0\1\317"+
    "\6\0\1\320\44\0\1\321\56\0\1\322\52\0\1\323"+
    "\5\0\1\324\67\0\1\60\50\0\1\325\31\0\2\114"+
    "\56\0\1\115\37\0\1\157\12\0\1\326\2\0\3\326"+
    "\1\113\1\327\46\326\1\330\2\0\4\330\1\331\1\113"+
    "\45\330\12\0\1\332\62\0\1\333\1\0\1\113\15\0"+
    "\1\334\30\0\1\335\1\0\1\336\7\0\1\337\4\0"+
    "\1\340\3\0\1\341\44\0\1\342\4\0\1\343\6\0"+
    "\1\344\27\0\1\345\55\0\1\346\2\0\1\347\6\0"+
    "\1\350\1\0\1\351\41\0\1\352\1\0\1\353\7\0"+
    "\1\354\1\0\1\355\1\0\1\356\46\0\1\357\65\0"+
    "\1\360\52\0\1\361\43\0\1\362\62\0\1\363\2\0"+
    "\1\364\62\0\1\365\36\0\1\366\16\0\1\367\37\0"+
    "\1\370\13\0\1\371\5\0\1\372\3\0\1\373\30\0"+
    "\1\374\1\0\1\375\6\0\1\376\44\0\1\377\56\0"+
    "\1\u0100\52\0\1\u0101\5\0\1\u0102\67\0\1\113\50\0"+
    "\1\u0103\34\0\2\146\3\0\32\146\16\0\1\147\37\0"+
    "\1\157\16\0\2\150\3\0\32\150\17\0\2\151\3\0"+
    "\32\151\17\0\2\15\3\0\21\15\1\170\10\15\13\0"+
    "\1\154\2\0\54\154\2\0\1\155\37\154\1\156\13\154"+
    "\2\0\40\154\1\247\12\154\2\160\1\0\53\160\2\163"+
    "\1\0\53\163\4\0\2\15\3\0\2\15\1\u0104\11\15"+
    "\1\u0105\15\15\17\0\2\15\3\0\6\15\1\u0106\23\15"+
    "\17\0\2\15\3\0\15\15\1\u0107\14\15\17\0\2\15"+
    "\3\0\26\15\1\170\3\15\17\0\2\15\3\0\1\170"+
    "\31\15\17\0\2\15\3\0\21\15\1\u0108\10\15\17\0"+
    "\2\15\3\0\1\15\1\u0109\16\15\1\u010a\11\15\17\0"+
    "\2\15\3\0\6\15\1\u010b\23\15\17\0\2\15\3\0"+
    "\4\15\1\u010c\25\15\17\0\2\15\3\0\13\15\1\u010d"+
    "\16\15\17\0\2\15\3\0\5\15\1\u010e\24\15\17\0"+
    "\2\15\3\0\6\15\1\u010f\23\15\17\0\2\15\3\0"+
    "\20\15\1\231\11\15\17\0\2\15\3\0\1\u0110\3\15"+
    "\1\u0111\3\15\1\u0112\21\15\17\0\2\15\3\0\7\15"+
    "\1\u0113\10\15\1\u0114\11\15\17\0\2\15\3\0\3\15"+
    "\1\u0115\26\15\17\0\2\15\3\0\1\15\1\u0116\16\15"+
    "\1\u0117\11\15\17\0\2\15\3\0\4\15\1\u0118\25\15"+
    "\17\0\2\15\3\0\22\15\1\u0119\7\15\17\0\2\15"+
    "\3\0\1\u011a\20\15\1\u011b\5\15\1\u011b\2\15\17\0"+
    "\2\15\3\0\7\15\1\u011c\22\15\17\0\2\15\3\0"+
    "\7\15\1\152\22\15\17\0\2\15\3\0\16\15\1\u011d"+
    "\13\15\17\0\2\15\3\0\16\15\1\u011e\13\15\17\0"+
    "\2\15\3\0\3\15\1\u011f\26\15\17\0\2\15\3\0"+
    "\4\15\1\u0120\25\15\17\0\2\15\3\0\3\15\1\u0121"+
    "\26\15\17\0\2\15\3\0\14\15\1\u0122\15\15\17\0"+
    "\2\15\3\0\1\u0123\7\15\1\u0124\10\15\1\u0125\10\15"+
    "\17\0\2\15\3\0\4\15\1\24\25\15\17\0\2\15"+
    "\3\0\4\15\1\170\25\15\17\0\2\15\3\0\21\15"+
    "\1\u010e\10\15\17\0\2\15\3\0\21\15\1\u011b\10\15"+
    "\17\0\2\15\3\0\1\15\1\u0126\30\15\17\0\2\15"+
    "\3\0\6\15\1\u0127\4\15\1\u0128\16\15\17\0\2\15"+
    "\3\0\2\15\1\170\27\15\17\0\2\15\3\0\16\15"+
    "\1\u0129\13\15\17\0\2\15\3\0\1\15\1\u012a\30\15"+
    "\17\0\2\15\3\0\20\15\1\u012b\11\15\17\0\2\15"+
    "\3\0\4\15\1\u012c\1\15\1\u012d\23\15\17\0\2\15"+
    "\3\0\13\15\1\u012e\16\15\17\0\2\15\3\0\5\15"+
    "\1\u012f\16\15\1\u0130\5\15\17\0\2\15\3\0\6\15"+
    "\1\u012d\23\15\17\0\2\15\3\0\17\15\1\u0131\12\15"+
    "\17\0\2\15\3\0\14\15\1\u0132\15\15\17\0\2\15"+
    "\3\0\5\15\1\u0133\24\15\17\0\2\15\3\0\4\15"+
    "\1\u0134\3\15\1\231\21\15\17\0\2\15\3\0\3\15"+
    "\1\u0135\26\15\13\0\1\247\2\0\53\247\2\250\1\0"+
    "\53\250\2\252\1\0\53\252\25\0\1\u0136\56\0\1\u0137"+
    "\66\0\1\60\27\0\1\60\76\0\1\u0138\35\0\1\u0139"+
    "\16\0\1\u013a\43\0\1\u013b\53\0\1\u013c\64\0\1\u013d"+
    "\47\0\1\u013e\56\0\1\u013f\67\0\1\312\35\0\1\u0140"+
    "\7\0\1\u0141\54\0\1\u0142\10\0\1\u0143\40\0\1\u0144"+
    "\53\0\1\u0145\16\0\1\u0146\57\0\1\u0147\33\0\1\u0148"+
    "\20\0\1\u0149\5\0\1\u0149\35\0\1\u014a\55\0\1\u014b"+
    "\64\0\1\u014c\55\0\1\u014d\43\0\1\u014e\54\0\1\u014f"+
    "\52\0\1\u0150\7\0\1\u0151\10\0\1\u0152\40\0\1\u0153"+
    "\55\0\1\60\72\0\1\u013e\55\0\1\u0149\42\0\1\u0154"+
    "\4\0\1\u0155\44\0\1\60\71\0\1\u0156\40\0\1\u0157"+
    "\74\0\1\u0158\41\0\1\u0159\64\0\1\u015a\47\0\1\u015b"+
    "\16\0\1\u015c\50\0\1\u015d\52\0\1\u015e\46\0\1\u015f"+
    "\54\0\1\u0160\3\0\1\312\50\0\1\u0161\41\0\2\326"+
    "\1\0\53\326\2\330\1\0\53\330\25\0\1\u0162\56\0"+
    "\1\u0163\66\0\1\113\27\0\1\113\76\0\1\u0164\35\0"+
    "\1\u0165\16\0\1\u0166\43\0\1\u0167\53\0\1\u0168\64\0"+
    "\1\u0169\47\0\1\u016a\56\0\1\u016b\67\0\1\370\35\0"+
    "\1\u016c\7\0\1\u016d\54\0\1\u016e\10\0\1\u016f\40\0"+
    "\1\u0170\53\0\1\u0171\16\0\1\u0172\57\0\1\u0173\33\0"+
    "\1\u0174\20\0\1\u0175\5\0\1\u0175\35\0\1\u0176\55\0"+
    "\1\u0177\64\0\1\u0178\55\0\1\u0179\43\0\1\u017a\54\0"+
    "\1\u017b\52\0\1\u017c\7\0\1\u017d\10\0\1\u017e\40\0"+
    "\1\u017f\55\0\1\113\72\0\1\u016a\55\0\1\u0175\42\0"+
    "\1\u0180\4\0\1\u0181\44\0\1\113\71\0\1\u0182\40\0"+
    "\1\u0183\74\0\1\u0184\41\0\1\u0185\64\0\1\u0186\47\0"+
    "\1\u0187\16\0\1\u0188\50\0\1\u0189\52\0\1\u018a\46\0"+
    "\1\u018b\54\0\1\u018c\3\0\1\370\50\0\1\u018d\45\0"+
    "\2\15\3\0\3\15\1\u018e\26\15\17\0\2\15\3\0"+
    "\21\15\1\u018f\10\15\17\0\2\15\3\0\15\15\1\u0190"+
    "\14\15\17\0\2\15\3\0\3\15\1\u0191\26\15\17\0"+
    "\2\15\3\0\6\15\1\u0192\23\15\17\0\2\15\3\0"+
    "\16\15\1\170\13\15\17\0\2\15\3\0\22\15\1\u0193"+
    "\7\15\17\0\2\15\3\0\20\15\1\170\11\15\17\0"+
    "\2\15\3\0\5\15\1\u0194\24\15\17\0\2\15\3\0"+
    "\1\15\1\u0132\30\15\17\0\2\15\3\0\15\15\1\170"+
    "\14\15\17\0\2\15\3\0\3\15\1\u0195\26\15\17\0"+
    "\2\15\3\0\16\15\1\u0196\13\15\17\0\2\15\3\0"+
    "\4\15\1\u0197\25\15\17\0\2\15\3\0\21\15\1\u0198"+
    "\10\15\17\0\2\15\3\0\5\15\1\u0199\24\15\17\0"+
    "\2\15\3\0\21\15\1\152\10\15\17\0\2\15\3\0"+
    "\20\15\1\u019a\11\15\17\0\2\15\3\0\1\15\1\u019b"+
    "\30\15\17\0\2\15\3\0\10\15\1\u019c\21\15\17\0"+
    "\2\15\3\0\4\15\1\u012d\25\15\17\0\2\15\3\0"+
    "\22\15\1\u019d\7\15\17\0\2\15\3\0\16\15\1\u019e"+
    "\13\15\17\0\2\15\3\0\6\15\1\170\23\15\17\0"+
    "\2\15\3\0\22\15\1\u019f\7\15\17\0\2\15\3\0"+
    "\3\15\1\170\26\15\17\0\2\15\3\0\14\15\1\u011b"+
    "\15\15\17\0\2\15\3\0\12\15\1\u01a0\17\15\17\0"+
    "\2\15\3\0\14\15\1\u011d\15\15\17\0\2\15\3\0"+
    "\10\15\1\170\21\15\17\0\2\15\3\0\6\15\1\u01a1"+
    "\23\15\17\0\2\15\3\0\1\15\1\u01a2\30\15\17\0"+
    "\2\15\3\0\2\15\1\u01a3\27\15\17\0\2\15\3\0"+
    "\3\15\1\u011b\3\15\1\u01a4\22\15\17\0\2\15\3\0"+
    "\16\15\1\u01a5\13\15\17\0\2\15\3\0\15\15\1\u01a6"+
    "\14\15\17\0\2\15\3\0\20\15\1\172\11\15\17\0"+
    "\2\15\3\0\3\15\1\u01a7\1\u01a8\25\15\17\0\2\15"+
    "\3\0\13\15\1\u011b\16\15\17\0\2\15\3\0\27\15"+
    "\1\170\2\15\17\0\2\15\3\0\3\15\1\u01a9\26\15"+
    "\17\0\2\15\3\0\1\15\1\u01aa\30\15\17\0\2\15"+
    "\3\0\5\15\1\u01ab\24\15\17\0\2\15\3\0\1\u01ac"+
    "\31\15\17\0\2\15\3\0\2\15\1\u01ad\11\15\1\u0109"+
    "\1\15\1\u01ae\13\15\17\0\2\15\3\0\13\15\1\170"+
    "\16\15\17\0\2\15\3\0\14\15\1\u01af\15\15\17\0"+
    "\2\15\3\0\6\15\1\u01a3\23\15\17\0\2\15\3\0"+
    "\13\15\1\u01b0\16\15\45\0\1\u01b1\37\0\1\u01b2\60\0"+
    "\1\u01b3\65\0\1\60\61\0\1\u01b4\53\0\1\60\42\0"+
    "\1\u01b5\51\0\1\u015e\71\0\1\60\43\0\1\u01b6\70\0"+
    "\1\u01b7\60\0\1\u01b8\41\0\1\u01b9\71\0\1\u014b\54\0"+
    "\1\u01ba\36\0\1\u01bb\64\0\1\u01bc\67\0\1\u01bd\51\0"+
    "\1\u01be\45\0\1\60\71\0\1\u01bf\36\0\1\60\66\0"+
    "\1\u0149\55\0\1\u014c\51\0\1\60\46\0\1\u01c0\56\0"+
    "\1\u01c1\56\0\1\u0149\3\0\1\u01c2\63\0\1\u01c3\60\0"+
    "\1\257\40\0\1\u01c4\1\u01c5\64\0\1\u0149\71\0\1\60"+
    "\31\0\1\u01c6\53\0\1\u01c7\61\0\1\u01c8\50\0\1\u01c9"+
    "\57\0\1\u01ca\11\0\1\u0139\1\0\1\u01cb\52\0\1\60"+
    "\56\0\1\u01cc\47\0\1\u01c1\62\0\1\u01cd\63\0\1\u01ce"+
    "\37\0\1\u01cf\60\0\1\u01d0\65\0\1\113\61\0\1\u01d1"+
    "\53\0\1\113\42\0\1\u01d2\51\0\1\u018a\71\0\1\113"+
    "\43\0\1\u01d3\70\0\1\u01d4\60\0\1\u01d5\41\0\1\u01d6"+
    "\71\0\1\u0177\54\0\1\u01d7\36\0\1\u01d8\64\0\1\u01d9"+
    "\67\0\1\u01da\51\0\1\u01db\45\0\1\113\71\0\1\u01dc"+
    "\36\0\1\113\66\0\1\u0175\55\0\1\u0178\51\0\1\113"+
    "\46\0\1\u01dd\56\0\1\u01de\56\0\1\u0175\3\0\1\u01df"+
    "\63\0\1\u01e0\60\0\1\335\40\0\1\u01e1\1\u01e2\64\0"+
    "\1\u0175\71\0\1\113\31\0\1\u01e3\53\0\1\u01e4\61\0"+
    "\1\u01e5\50\0\1\u01e6\57\0\1\u01e7\11\0\1\u0165\1\0"+
    "\1\u01e8\52\0\1\113\56\0\1\u01e9\47\0\1\u01de\62\0"+
    "\1\u01ea\35\0\2\15\3\0\4\15\1\u01a0\25\15\17\0"+
    "\2\15\3\0\3\15\1\u01eb\26\15\17\0\2\15\3\0"+
    "\1\15\1\u01ec\30\15\17\0\2\15\3\0\13\15\1\u01ed"+
    "\16\15\17\0\2\15\3\0\13\15\1\u01ee\16\15\17\0"+
    "\2\15\3\0\1\15\1\u01ef\1\15\1\u01f0\1\u01f1\14\15"+
    "\1\u01f2\10\15\17\0\2\15\3\0\4\15\1\u01f3\25\15"+
    "\17\0\2\15\3\0\10\15\1\u01f4\21\15\17\0\2\15"+
    "\3\0\4\15\1\u01f5\25\15\17\0\2\15\3\0\3\15"+
    "\1\u01f6\26\15\17\0\2\15\3\0\6\15\1\u01f7\23\15"+
    "\17\0\2\15\3\0\23\15\1\170\6\15\17\0\2\15"+
    "\3\0\6\15\1\u011d\23\15\17\0\2\15\3\0\21\15"+
    "\1\u011d\10\15\17\0\2\15\3\0\22\15\1\u011d\7\15"+
    "\17\0\2\15\3\0\4\15\1\u011d\25\15\17\0\2\15"+
    "\3\0\4\15\1\u0115\25\15\17\0\2\15\3\0\22\15"+
    "\1\u01a3\7\15\17\0\2\15\3\0\3\15\1\u01a0\26\15"+
    "\17\0\2\15\3\0\11\15\1\u011d\20\15\17\0\2\15"+
    "\3\0\3\15\1\u0132\26\15\17\0\2\15\3\0\25\15"+
    "\1\u011d\4\15\17\0\2\15\3\0\3\15\1\u01f8\26\15"+
    "\17\0\2\15\3\0\10\15\1\u01f9\21\15\17\0\2\15"+
    "\3\0\10\15\1\231\21\15\17\0\2\15\3\0\7\15"+
    "\1\u01fa\7\15\1\170\12\15\17\0\2\15\3\0\5\15"+
    "\1\u011b\24\15\17\0\2\15\3\0\4\15\1\224\25\15"+
    "\17\0\2\15\3\0\3\15\1\u0114\26\15\17\0\2\15"+
    "\3\0\7\15\1\u011b\22\15\17\0\2\15\3\0\1\15"+
    "\1\u01fb\30\15\17\0\2\15\3\0\13\15\1\u01ab\16\15"+
    "\17\0\2\15\3\0\21\15\1\u01fc\10\15\17\0\2\15"+
    "\3\0\17\15\1\u01fd\12\15\27\0\1\u01fe\65\0\1\u01ff"+
    "\55\0\1\u0200\43\0\1\u0201\1\0\1\u0202\1\u0203\14\0"+
    "\1\u0204\40\0\1\u0205\61\0\1\u0206\51\0\1\u0207\57\0"+
    "\1\u0208\72\0\1\60\40\0\1\u014c\70\0\1\u014c\56\0"+
    "\1\u014c\37\0\1\u014c\55\0\1\u0144\73\0\1\u01c1\44\0"+
    "\1\u014c\47\0\1\u015e\77\0\1\u014c\40\0\1\u0209\55\0"+
    "\1\312\54\0\1\u020a\7\0\1\60\43\0\1\u0149\54\0"+
    "\1\306\54\0\1\u0143\61\0\1\u0149\47\0\1\u020b\67\0"+
    "\1\u01c8\63\0\1\u020c\53\0\1\u020d\41\0\1\u020e\65\0"+
    "\1\u020f\55\0\1\u0210\43\0\1\u0211\1\0\1\u0212\1\u0213"+
    "\14\0\1\u0214\40\0\1\u0215\61\0\1\u0216\51\0\1\u0217"+
    "\57\0\1\u0218\72\0\1\113\40\0\1\u0178\70\0\1\u0178"+
    "\56\0\1\u0178\37\0\1\u0178\55\0\1\u0170\73\0\1\u01de"+
    "\44\0\1\u0178\47\0\1\u018a\77\0\1\u0178\40\0\1\u0219"+
    "\55\0\1\370\54\0\1\u021a\7\0\1\113\43\0\1\u0175"+
    "\54\0\1\364\54\0\1\u016f\61\0\1\u0175\47\0\1\u021b"+
    "\67\0\1\u01e5\63\0\1\u021c\53\0\1\u021d\31\0\2\15"+
    "\3\0\1\u0123\1\u021e\1\u01ad\11\15\1\u0109\15\15\17\0"+
    "\2\15\3\0\2\15\1\u012d\27\15\17\0\2\15\3\0"+
    "\12\15\1\u021f\17\15\17\0\2\15\3\0\1\15\1\u0220"+
    "\12\15\1\u01a9\15\15\17\0\2\15\3\0\11\15\1\u01a3"+
    "\20\15\17\0\2\15\3\0\10\15\1\u0221\21\15\17\0"+
    "\2\15\3\0\3\15\1\u0222\26\15\17\0\2\15\3\0"+
    "\6\15\1\u0223\23\15\17\0\2\15\3\0\7\15\1\u0113"+
    "\22\15\17\0\2\15\3\0\2\15\1\152\27\15\17\0"+
    "\2\15\3\0\3\15\1\u019a\26\15\17\0\2\15\3\0"+
    "\5\15\1\u0224\24\15\17\0\2\15\3\0\13\15\1\u0225"+
    "\16\15\17\0\2\15\3\0\13\15\1\u0226\16\15\17\0"+
    "\2\15\3\0\20\15\1\u0227\11\15\17\0\2\15\3\0"+
    "\5\15\1\u0228\24\15\17\0\2\15\3\0\12\15\1\u0121"+
    "\17\15\17\0\2\15\3\0\1\15\1\u011e\5\15\1\u0121"+
    "\22\15\17\0\2\15\3\0\21\15\1\u0229\10\15\24\0"+
    "\1\u0150\1\u022a\1\u01ca\11\0\1\u0139\53\0\1\u022b\44\0"+
    "\1\u022c\12\0\1\u01c6\52\0\1\u01c1\54\0\1\u022d\50\0"+
    "\1\u022e\60\0\1\u022f\56\0\1\u0142\50\0\1\u014b\56\0"+
    "\1\u01ba\65\0\1\u0230\62\0\1\u0231\42\0\1\u0232\62\0"+
    "\1\u014f\44\0\1\u014d\5\0\1\u014f\67\0\1\u0233\34\0"+
    "\1\u017c\1\u0234\1\u01e7\11\0\1\u0165\53\0\1\u0235\44\0"+
    "\1\u0236\12\0\1\u01e3\52\0\1\u01de\54\0\1\u0237\50\0"+
    "\1\u0238\60\0\1\u0239\56\0\1\u016e\50\0\1\u0177\56\0"+
    "\1\u01d7\65\0\1\u023a\62\0\1\u023b\42\0\1\u023c\62\0"+
    "\1\u017b\44\0\1\u0179\5\0\1\u017b\67\0\1\u023d\27\0"+
    "\2\15\3\0\11\15\1\u01a3\2\15\1\u011b\15\15\17\0"+
    "\2\15\3\0\7\15\1\u019b\22\15\17\0\2\15\3\0"+
    "\17\15\1\170\12\15\17\0\2\15\3\0\2\15\1\170"+
    "\3\15\1\u01a3\23\15\17\0\2\15\3\0\20\15\1\u01a2"+
    "\11\15\17\0\2\15\3\0\20\15\1\u012a\11\15\17\0"+
    "\2\15\3\0\6\15\1\u023e\23\15\17\0\2\15\3\0"+
    "\14\15\1\u01a9\15\15\17\0\2\15\3\0\6\15\1\u023f"+
    "\23\15\17\0\2\15\3\0\1\u011d\31\15\17\0\2\15"+
    "\3\0\20\15\1\u0240\11\15\17\0\2\15\3\0\6\15"+
    "\1\u0241\23\15\35\0\1\u01c1\2\0\1\u0149\50\0\1\u01bb"+
    "\65\0\1\60\40\0\1\60\3\0\1\u01c1\67\0\1\u01c0"+
    "\55\0\1\u0157\51\0\1\u01c6\41\0\1\u014c\75\0\1\u0242"+
    "\43\0\1\u0243\60\0\1\u01de\2\0\1\u0175\50\0\1\u01d8"+
    "\65\0\1\113\40\0\1\113\3\0\1\u01de\67\0\1\u01dd"+
    "\55\0\1\u0183\51\0\1\u01e3\41\0\1\u0178\75\0\1\u0244"+
    "\43\0\1\u0245\42\0\2\15\3\0\7\15\1\u0246\22\15"+
    "\17\0\2\15\3\0\17\15\1\u012d\12\15\17\0\2\15"+
    "\3\0\6\15\1\u0247\23\15\17\0\2\15\3\0\13\15"+
    "\1\u0248\16\15\32\0\1\u0249\62\0\1\u024a\50\0\1\u024b"+
    "\62\0\1\u024c\35\0\2\15\3\0\1\15\1\u024d\30\15"+
    "\17\0\2\15\3\0\7\15\1\u024e\22\15\17\0\2\15"+
    "\3\0\7\15\1\u024f\22\15\33\0\1\u0250\55\0\1\u0251"+
    "\55\0\1\u0252\55\0\1\u0253\41\0\2\15\3\0\10\15"+
    "\1\u01a0\21\15\17\0\2\15\3\0\1\15\1\u0121\30\15"+
    "\17\0\2\15\3\0\10\15\1\u0254\21\15\25\0\1\u014f"+
    "\64\0\1\u0255\46\0\1\u017b\64\0\1\u0256\40\0\2\15"+
    "\3\0\22\15\1\170\7\15\46\0\1\60\55\0\1\113"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\34\1\12\11\32\1\1\11\37\1\1\11"+
    "\3\1\2\0\1\11\3\0\63\1\134\0\62\1\130\0"+
    "\43\1\3\0\1\1\34\0\1\1\31\0\23\1\16\0"+
    "\1\1\17\0\1\1\1\0\14\1\24\0\4\1\4\0"+
    "\3\1\4\0\3\1\4\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[598];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _CoocooLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  protected abstract void readJavaScript(int state) throws java.io.IOException;
  protected abstract void readMultilineJavaScript(int state) throws java.io.IOException;


  _CoocooLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CoocooLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(GETTER); return PROPERTY_GETTER;
          }
        case 28: break;
        case 6: 
          { yybegin(YYINITIAL); return SUBCOOCOO;
          }
        case 29: break;
        case 27: 
          { yybegin(CLASS); return KEYWORD;
          }
        case 30: break;
        case 25: 
          { return COMMENT;
          }
        case 31: break;
        case 10: 
          { yybegin(TYPE); return TYPIFICATION;
          }
        case 32: break;
        case 23: 
          { yybegin(AFTER); return KEYWORD;
          }
        case 33: break;
        case 8: 
          { yybegin(GETTER); return VARIABLE_GETTER;
          }
        case 34: break;
        case 20: 
          { yybegin(YYINITIAL); return NULLABLE;
          }
        case 35: break;
        case 21: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 36: break;
        case 15: 
          { return JAVASCRIPT;
          }
        case 37: break;
        case 14: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(AFTER); return JAVASCRIPT;
          }
        case 38: break;
        case 3: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 39: break;
        case 11: 
          { yybegin(AFTER); return TYPIFICATION;
          }
        case 40: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 41: break;
        case 7: 
          { yybegin(AFTER); return SUBCOOCOO;
          }
        case 42: break;
        case 17: 
          { return WHITE_SPACE;
          }
        case 43: break;
        case 22: 
          { yybegin(AFTER); return STRING;
          }
        case 44: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 45: break;
        case 19: 
          { yybegin(AFTER); return COONAME;
          }
        case 46: break;
        case 26: 
          { yybegin(NAME); return KEYWORD;
          }
        case 47: break;
        case 5: 
          { return PUSHER;
          }
        case 48: break;
        case 12: 
          { yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 49: break;
        case 16: 
          { yybegin(AFTER); return VARIABLE;
          }
        case 50: break;
        case 13: 
          { return JAVASCRIPT_END;
          }
        case 51: break;
        case 4: 
          { yybegin(AFTER); return IDENTIFIER;
          }
        case 52: break;
        case 24: 
          { yybegin(IN_JAVASCRIPT2); readMultilineJavaScript(YYINITIAL); return KEYWORD;
          }
        case 53: break;
        case 18: 
          { yybegin(AFTER); return COOCLASS;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
