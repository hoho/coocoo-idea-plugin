/* The following code was generated by JFlex 1.4.3 on 2/18/14 7:27 PM */

package com.hoho.coocoo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.coocoo.psi.CoocooTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/18/14 7:27 PM from the specification file
 * <tt>/Users/hoho/Work/coocooPlugin/src/com/hoho/coocoo/Coocoo.flex</tt>
 */
abstract class _CoocooLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GETTER = 8;
  public static final int IN_JAVASCRIPT = 2;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int TYPE = 14;
  public static final int IN_BAD = 16;
  public static final int YYINITIAL = 0;
  public static final int AFTER = 6;
  public static final int NAME = 12;
  public static final int CLASS = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\1\0\1\46\2\0\1\10\1\53\1\54\1\0\1\43\3\0\1\42"+
    "\12\5\2\0\1\50\1\0\1\51\1\52\1\47\32\4\1\44\1\7"+
    "\1\45\1\0\1\4\1\0\1\31\1\35\1\16\1\13\1\14\1\37"+
    "\1\33\1\26\1\20\1\41\1\34\1\15\1\11\1\21\1\12\1\27"+
    "\1\4\1\24\1\32\1\17\1\25\1\22\1\23\1\40\1\30\1\36"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\2\1\26\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\33\16\33\17\1\20\1\21\1\22\1\23\1\4"+
    "\1\24\3\25\2\0\1\26\3\0\3\4\1\27\57\4"+
    "\1\30\1\31\142\0\55\4\1\32\11\4\142\0\5\4"+
    "\1\27\16\4\1\33\21\4\3\0\1\16\40\0\1\17"+
    "\35\0\15\4\1\33\6\4\1\27\20\0\1\16\20\0"+
    "\1\17\15\4\26\0\3\4\2\0\2\4\2\0\2\4"+
    "\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u0195\0\u0195"+
    "\0\u0195\0\u0195\0\u0195\0\u0195\0\u0195\0\u0195\0\u0195\0\u0195"+
    "\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9"+
    "\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951"+
    "\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0681\0\u0195\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0681\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u0195\0\u1059\0\u1086\0\u10b3\0\u0681\0\u0249"+
    "\0\u0195\0\u10e0\0\u0276\0\u110d\0\u113a\0\u1167\0\u1194\0\u021c"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u021c"+
    "\0\u1a04\0\u0708\0\u1a31\0\u0735\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u0b6d\0\u2274\0\u0b9a\0\u22a1\0\u22ce\0\u22fb"+
    "\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463"+
    "\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733"+
    "\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b"+
    "\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03"+
    "\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b"+
    "\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3"+
    "\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b"+
    "\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3"+
    "\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b"+
    "\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273"+
    "\0\u021c\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae"+
    "\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516"+
    "\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e"+
    "\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u375f\0\u378c\0\u37b9\0\u37e6"+
    "\0\u0ae6\0\u3813\0\u3840\0\u386d\0\u389a\0\u38c7\0\u38f4\0\u3921"+
    "\0\u394e\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89"+
    "\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1"+
    "\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59"+
    "\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1"+
    "\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029"+
    "\0\u4056\0\u0f4b\0\u4083\0\u40b0\0\u40dd\0\u410a\0\u4137\0\u4164"+
    "\0\u4191\0\u41be\0\u41eb\0\u4218\0\u4245\0\u4272\0\u429f\0\u42cc"+
    "\0\u42f9\0\u4326\0\u4353\0\u4380\0\u43ad\0\u43da\0\u4407\0\u4434"+
    "\0\u4461\0\u448e\0\u44bb\0\u44e8\0\u4515\0\u4542\0\u456f\0\u459c"+
    "\0\u45c9\0\u45f6\0\u4623\0\u4650\0\u467d\0\u46aa\0\u46d7\0\u4704"+
    "\0\u4731\0\u475e\0\u478b\0\u47b8\0\u47e5\0\u4812\0\u483f\0\u486c"+
    "\0\u021c\0\u4899\0\u48c6\0\u48f3\0\u4920\0\u494d\0\u497a\0\u49a7"+
    "\0\u49d4\0\u4a01\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5\0\u4ae2\0\u4b0f"+
    "\0\u4b3c\0\u4b69\0\u4b96\0\u4bc3\0\u4bf0\0\u4c1d\0\u4c4a\0\u4c77"+
    "\0\u4ca4\0\u4cd1\0\u4cfe\0\u4d2b\0\u4d58\0\u4d85\0\u4db2\0\u4ddf"+
    "\0\u4e0c\0\u4e39\0\u4e66\0\u4e93\0\u4ec0\0\u4eed\0\u4f1a\0\u4f47"+
    "\0\u4f74\0\u4fa1\0\u4fce\0\u4ffb\0\u5028\0\u5055\0\u5082\0\u50af"+
    "\0\u50dc\0\u5109\0\u5136\0\u5163\0\u5190\0\u51bd\0\u51ea\0\u5217"+
    "\0\u5244\0\u5271\0\u529e\0\u52cb\0\u52f8\0\u5325\0\u5352\0\u537f"+
    "\0\u53ac\0\u53d9\0\u5406\0\u5433\0\u5460\0\u548d\0\u54ba\0\u54e7"+
    "\0\u5514\0\u5541\0\u556e\0\u559b\0\u55c8\0\u55f5\0\u5622\0\u564f"+
    "\0\u567c\0\u56a9\0\u56d6\0\u5703\0\u5730\0\u575d\0\u578a\0\u57b7"+
    "\0\u57e4\0\u5811\0\u583e\0\u586b\0\u5898\0\u58c5\0\u58f2\0\u591f"+
    "\0\u594c\0\u102c\0\u5979\0\u59a6\0\u59d3\0\u5a00\0\u5a2d\0\u5a5a"+
    "\0\u5a87\0\u5ab4\0\u5ae1\0\u5b0e\0\u5b3b\0\u5b68\0\u5b95\0\u5bc2"+
    "\0\u5bef\0\u5c1c\0\u5c49\0\u5c76\0\u5ca3\0\u5cd0\0\u5cfd\0\u5d2a"+
    "\0\u5d57\0\u5d84\0\u5db1\0\u5dde\0\u5e0b\0\u5e38\0\u5e65\0\u5e92"+
    "\0\u5ebf\0\u5eec\0\u5f19\0\u5f46\0\u5f73\0\u5fa0\0\u5fcd\0\u5ffa"+
    "\0\u6027\0\u6054\0\u6081\0\u60ae\0\u60db\0\u6108\0\u6135\0\u6162"+
    "\0\u618f\0\u61bc\0\u61e9\0\u6216\0\u6243\0\u6270\0\u629d\0\u62ca"+
    "\0\u62f7\0\u6324\0\u6351\0\u637e\0\u63ab\0\u63d8\0\u6405\0\u6432"+
    "\0\u645f\0\u648c\0\u64b9\0\u64e6\0\u6513\0\u6540\0\u656d\0\u659a"+
    "\0\u65c7\0\u65f4\0\u6621\0\u664e\0\u667b\0\u66a8\0\u66d5\0\u6702"+
    "\0\u672f\0\u675c\0\u6789\0\u67b6\0\u67e3\0\u6810\0\u683d\0\u686a"+
    "\0\u6897\0\u68c4\0\u68f1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\1\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\15"+
    "\1\37\1\40\1\41\1\42\1\43\1\15\1\44\1\15"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\12\1\56\1\57\1\60\2\61\1\62\2\60"+
    "\1\63\1\60\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\60\1\104\1\105\1\60\1\106\1\107"+
    "\1\60\1\110\1\60\1\111\1\112\12\60\1\113\2\114"+
    "\1\115\2\113\1\116\1\113\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\113\1\137\1\140\1\113"+
    "\1\141\1\142\1\113\1\143\1\113\1\144\1\145\12\113"+
    "\1\12\2\13\1\14\36\12\1\46\2\12\1\51\2\12"+
    "\1\54\1\55\2\12\1\57\1\12\2\13\1\14\1\146"+
    "\4\12\31\146\1\46\11\12\1\57\1\12\2\13\1\147"+
    "\1\150\4\12\31\150\1\46\1\12\1\50\1\51\1\52"+
    "\1\53\4\12\1\57\1\12\2\13\1\147\1\151\4\12"+
    "\31\151\1\46\1\12\1\50\1\51\1\52\1\53\3\12"+
    "\1\56\1\57\1\12\2\13\1\147\1\15\4\12\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\15\1\37"+
    "\1\40\1\41\1\42\1\43\1\15\1\44\1\15\1\152"+
    "\1\46\7\12\1\153\1\12\1\57\1\154\2\13\1\155"+
    "\36\154\1\156\12\154\56\0\2\13\55\0\1\14\36\0"+
    "\1\157\16\0\2\15\3\0\31\15\13\0\1\160\2\0"+
    "\3\160\1\161\1\162\45\160\1\163\2\0\4\163\1\164"+
    "\1\161\44\163\4\0\2\15\3\0\1\15\1\165\1\15"+
    "\1\166\25\15\17\0\2\15\3\0\6\15\1\167\1\15"+
    "\1\170\15\15\1\171\2\15\17\0\2\15\3\0\1\15"+
    "\1\172\1\15\1\173\7\15\1\174\4\15\1\175\3\15"+
    "\1\176\4\15\17\0\2\15\3\0\13\15\1\177\4\15"+
    "\1\200\6\15\1\201\1\15\17\0\2\15\3\0\1\15"+
    "\1\202\1\15\1\203\25\15\17\0\2\15\3\0\1\15"+
    "\1\204\2\15\1\205\6\15\1\206\1\15\1\207\2\15"+
    "\1\210\10\15\17\0\2\15\3\0\1\15\1\211\1\15"+
    "\1\212\7\15\1\213\1\15\1\214\1\15\1\215\11\15"+
    "\17\0\2\15\3\0\10\15\1\216\20\15\17\0\2\15"+
    "\3\0\1\15\1\217\27\15\17\0\2\15\3\0\7\15"+
    "\1\220\10\15\1\221\10\15\17\0\2\15\3\0\15\15"+
    "\1\222\13\15\17\0\2\15\3\0\1\15\1\223\1\15"+
    "\1\224\25\15\17\0\2\15\3\0\10\15\1\225\2\15"+
    "\1\226\15\15\17\0\2\15\3\0\20\15\1\227\10\15"+
    "\17\0\2\15\3\0\1\15\1\230\11\15\1\231\4\15"+
    "\1\232\10\15\17\0\2\15\3\0\2\15\1\233\3\15"+
    "\1\234\7\15\1\235\5\15\1\236\3\15\1\237\17\0"+
    "\2\15\3\0\3\15\1\240\1\15\1\241\6\15\1\242"+
    "\14\15\17\0\2\15\3\0\3\15\1\243\25\15\17\0"+
    "\2\15\3\0\3\15\1\244\25\15\17\0\2\15\3\0"+
    "\4\15\1\245\24\15\17\0\2\15\3\0\1\15\1\246"+
    "\5\15\1\247\21\15\17\0\2\15\3\0\21\15\1\250"+
    "\7\15\55\0\1\251\13\0\2\61\55\0\1\62\36\0"+
    "\1\157\12\0\1\252\2\0\3\252\1\60\1\253\45\252"+
    "\1\254\2\0\4\254\1\255\1\60\44\254\12\0\1\256"+
    "\61\0\1\257\1\0\1\60\15\0\1\260\27\0\1\261"+
    "\1\0\1\262\7\0\1\263\4\0\1\264\3\0\1\265"+
    "\43\0\1\266\4\0\1\267\6\0\1\270\26\0\1\271"+
    "\1\0\1\272\52\0\1\273\2\0\1\274\6\0\1\275"+
    "\1\0\1\276\40\0\1\277\1\0\1\300\7\0\1\301"+
    "\1\0\1\302\1\0\1\303\45\0\1\304\45\0\1\305"+
    "\73\0\1\306\51\0\1\307\40\0\1\310\1\0\1\311"+
    "\61\0\1\312\2\0\1\313\61\0\1\314\35\0\1\315"+
    "\16\0\1\316\36\0\1\317\3\0\1\320\7\0\1\321"+
    "\5\0\1\322\3\0\1\323\27\0\1\324\1\0\1\325"+
    "\6\0\1\326\43\0\1\327\55\0\1\330\51\0\1\331"+
    "\5\0\1\332\66\0\1\60\23\0\2\114\55\0\1\115"+
    "\36\0\1\157\12\0\1\333\2\0\3\333\1\113\1\334"+
    "\45\333\1\335\2\0\4\335\1\336\1\113\44\335\12\0"+
    "\1\337\61\0\1\340\1\0\1\113\15\0\1\341\27\0"+
    "\1\342\1\0\1\343\7\0\1\344\4\0\1\345\3\0"+
    "\1\346\43\0\1\347\4\0\1\350\6\0\1\351\26\0"+
    "\1\352\1\0\1\353\52\0\1\354\2\0\1\355\6\0"+
    "\1\356\1\0\1\357\40\0\1\360\1\0\1\361\7\0"+
    "\1\362\1\0\1\363\1\0\1\364\45\0\1\365\45\0"+
    "\1\366\73\0\1\367\51\0\1\370\40\0\1\371\1\0"+
    "\1\372\61\0\1\373\2\0\1\374\61\0\1\375\35\0"+
    "\1\376\16\0\1\377\36\0\1\u0100\3\0\1\u0101\7\0"+
    "\1\u0102\5\0\1\u0103\3\0\1\u0104\27\0\1\u0105\1\0"+
    "\1\u0106\6\0\1\u0107\43\0\1\u0108\55\0\1\u0109\51\0"+
    "\1\u010a\5\0\1\u010b\66\0\1\113\26\0\2\146\3\0"+
    "\31\146\16\0\1\147\36\0\1\157\16\0\2\150\3\0"+
    "\31\150\17\0\2\151\3\0\31\151\17\0\2\15\3\0"+
    "\21\15\1\170\7\15\13\0\1\154\2\0\53\154\2\0"+
    "\1\155\36\154\1\156\13\154\2\0\37\154\1\251\12\154"+
    "\2\160\1\0\52\160\2\163\1\0\52\163\4\0\2\15"+
    "\3\0\2\15\1\u010c\11\15\1\u010d\14\15\17\0\2\15"+
    "\3\0\6\15\1\u010e\22\15\17\0\2\15\3\0\15\15"+
    "\1\u010f\13\15\17\0\2\15\3\0\26\15\1\170\2\15"+
    "\17\0\2\15\3\0\1\170\30\15\17\0\2\15\3\0"+
    "\21\15\1\u0110\7\15\17\0\2\15\3\0\1\15\1\u0111"+
    "\16\15\1\u0112\10\15\17\0\2\15\3\0\6\15\1\u0113"+
    "\22\15\17\0\2\15\3\0\4\15\1\u0114\24\15\17\0"+
    "\2\15\3\0\13\15\1\u0115\15\15\17\0\2\15\3\0"+
    "\5\15\1\u0116\23\15\17\0\2\15\3\0\6\15\1\u0117"+
    "\22\15\17\0\2\15\3\0\20\15\1\233\10\15\17\0"+
    "\2\15\3\0\10\15\1\u0118\20\15\17\0\2\15\3\0"+
    "\1\u0119\3\15\1\u011a\3\15\1\u011b\20\15\17\0\2\15"+
    "\3\0\7\15\1\u011c\10\15\1\u011d\10\15\17\0\2\15"+
    "\3\0\3\15\1\u011e\25\15\17\0\2\15\3\0\1\15"+
    "\1\u011f\16\15\1\u0120\10\15\17\0\2\15\3\0\4\15"+
    "\1\u0121\24\15\17\0\2\15\3\0\22\15\1\u0122\6\15"+
    "\17\0\2\15\3\0\1\u0123\20\15\1\u0124\5\15\1\u0124"+
    "\1\15\17\0\2\15\3\0\7\15\1\u0125\21\15\17\0"+
    "\2\15\3\0\7\15\1\152\21\15\17\0\2\15\3\0"+
    "\16\15\1\u0126\12\15\17\0\2\15\3\0\16\15\1\u0127"+
    "\12\15\17\0\2\15\3\0\1\u0128\30\15\17\0\2\15"+
    "\3\0\3\15\1\u0129\25\15\17\0\2\15\3\0\4\15"+
    "\1\u012a\24\15\17\0\2\15\3\0\3\15\1\u012b\25\15"+
    "\17\0\2\15\3\0\14\15\1\u012c\14\15\17\0\2\15"+
    "\3\0\1\u012d\7\15\1\u012e\10\15\1\u012f\7\15\17\0"+
    "\2\15\3\0\4\15\1\u0130\24\15\17\0\2\15\3\0"+
    "\4\15\1\170\24\15\17\0\2\15\3\0\21\15\1\u0116"+
    "\7\15\17\0\2\15\3\0\21\15\1\u0124\7\15\17\0"+
    "\2\15\3\0\1\15\1\u0131\27\15\17\0\2\15\3\0"+
    "\6\15\1\u0132\4\15\1\u0133\15\15\17\0\2\15\3\0"+
    "\2\15\1\170\26\15\17\0\2\15\3\0\6\15\1\u0134"+
    "\22\15\17\0\2\15\3\0\16\15\1\u0135\12\15\17\0"+
    "\2\15\3\0\1\15\1\u0136\27\15\17\0\2\15\3\0"+
    "\20\15\1\u0137\10\15\17\0\2\15\3\0\4\15\1\u0138"+
    "\1\15\1\u0139\4\15\1\u013a\4\15\1\u013b\10\15\17\0"+
    "\2\15\3\0\13\15\1\u013c\15\15\17\0\2\15\3\0"+
    "\5\15\1\u013d\16\15\1\u013e\4\15\17\0\2\15\3\0"+
    "\6\15\1\u0139\22\15\17\0\2\15\3\0\17\15\1\u013f"+
    "\11\15\17\0\2\15\3\0\14\15\1\u0140\14\15\17\0"+
    "\2\15\3\0\5\15\1\u0141\5\15\1\172\15\15\17\0"+
    "\2\15\3\0\4\15\1\u0142\3\15\1\233\20\15\13\0"+
    "\1\251\2\0\52\251\2\252\1\0\52\252\2\254\1\0"+
    "\52\254\25\0\1\u0143\55\0\1\u0144\65\0\1\60\26\0"+
    "\1\60\75\0\1\u0145\34\0\1\u0146\16\0\1\u0147\42\0"+
    "\1\u0148\52\0\1\u0149\63\0\1\u014a\46\0\1\u014b\55\0"+
    "\1\u014c\66\0\1\317\44\0\1\u014d\44\0\1\u014e\7\0"+
    "\1\u014f\53\0\1\u0150\10\0\1\u0151\37\0\1\u0152\52\0"+
    "\1\u0153\16\0\1\u0154\56\0\1\u0155\32\0\1\u0156\20\0"+
    "\1\u0157\5\0\1\u0157\34\0\1\u0158\54\0\1\u0159\63\0"+
    "\1\u015a\54\0\1\u015b\36\0\1\u015c\60\0\1\u015d\53\0"+
    "\1\u015e\65\0\1\u015f\40\0\1\u0160\7\0\1\u0161\10\0"+
    "\1\u0162\37\0\1\u0163\54\0\1\60\71\0\1\u014b\54\0"+
    "\1\u0157\41\0\1\u0164\4\0\1\u0165\43\0\1\60\60\0"+
    "\1\u0166\64\0\1\u0167\37\0\1\u0168\73\0\1\u0169\40\0"+
    "\1\u016a\6\0\1\u016b\4\0\1\u016c\47\0\1\u016d\46\0"+
    "\1\u016e\16\0\1\u016f\47\0\1\u0170\51\0\1\u0171\45\0"+
    "\1\u0172\5\0\1\261\45\0\1\u0173\3\0\1\317\33\0"+
    "\2\333\1\0\52\333\2\335\1\0\52\335\25\0\1\u0174"+
    "\55\0\1\u0175\65\0\1\113\26\0\1\113\75\0\1\u0176"+
    "\34\0\1\u0177\16\0\1\u0178\42\0\1\u0179\52\0\1\u017a"+
    "\63\0\1\u017b\46\0\1\u017c\55\0\1\u017d\66\0\1\u0100"+
    "\44\0\1\u017e\44\0\1\u017f\7\0\1\u0180\53\0\1\u0181"+
    "\10\0\1\u0182\37\0\1\u0183\52\0\1\u0184\16\0\1\u0185"+
    "\56\0\1\u0186\32\0\1\u0187\20\0\1\u0188\5\0\1\u0188"+
    "\34\0\1\u0189\54\0\1\u018a\63\0\1\u018b\54\0\1\u018c"+
    "\36\0\1\u018d\60\0\1\u018e\53\0\1\u018f\65\0\1\u0190"+
    "\40\0\1\u0191\7\0\1\u0192\10\0\1\u0193\37\0\1\u0194"+
    "\54\0\1\113\71\0\1\u017c\54\0\1\u0188\41\0\1\u0195"+
    "\4\0\1\u0196\43\0\1\113\60\0\1\u0197\64\0\1\u0198"+
    "\37\0\1\u0199\73\0\1\u019a\40\0\1\u019b\6\0\1\u019c"+
    "\4\0\1\u019d\47\0\1\u019e\46\0\1\u019f\16\0\1\u01a0"+
    "\47\0\1\u01a1\51\0\1\u01a2\45\0\1\u01a3\5\0\1\342"+
    "\45\0\1\u01a4\3\0\1\u0100\37\0\2\15\3\0\3\15"+
    "\1\u01a5\25\15\17\0\2\15\3\0\21\15\1\u01a6\7\15"+
    "\17\0\2\15\3\0\15\15\1\u01a7\13\15\17\0\2\15"+
    "\3\0\3\15\1\u01a8\25\15\17\0\2\15\3\0\6\15"+
    "\1\u01a9\22\15\17\0\2\15\3\0\16\15\1\170\12\15"+
    "\17\0\2\15\3\0\22\15\1\u01aa\6\15\17\0\2\15"+
    "\3\0\20\15\1\170\10\15\17\0\2\15\3\0\5\15"+
    "\1\u01ab\23\15\17\0\2\15\3\0\1\15\1\u0140\27\15"+
    "\17\0\2\15\3\0\15\15\1\170\13\15\17\0\2\15"+
    "\3\0\3\15\1\u01ac\25\15\17\0\2\15\3\0\22\15"+
    "\1\u01ad\6\15\17\0\2\15\3\0\16\15\1\u01ae\12\15"+
    "\17\0\2\15\3\0\4\15\1\u01af\24\15\17\0\2\15"+
    "\3\0\21\15\1\u01b0\7\15\17\0\2\15\3\0\5\15"+
    "\1\u01b1\23\15\17\0\2\15\3\0\21\15\1\152\7\15"+
    "\17\0\2\15\3\0\20\15\1\u01b2\10\15\17\0\2\15"+
    "\3\0\1\15\1\u01b3\27\15\17\0\2\15\3\0\10\15"+
    "\1\u01b4\20\15\17\0\2\15\3\0\4\15\1\u0139\24\15"+
    "\17\0\2\15\3\0\22\15\1\u01b5\6\15\17\0\2\15"+
    "\3\0\16\15\1\u01b6\12\15\17\0\2\15\3\0\6\15"+
    "\1\170\22\15\17\0\2\15\3\0\22\15\1\u01b7\6\15"+
    "\17\0\2\15\3\0\3\15\1\170\25\15\17\0\2\15"+
    "\3\0\14\15\1\u0124\14\15\17\0\2\15\3\0\20\15"+
    "\1\u01b8\10\15\17\0\2\15\3\0\12\15\1\u01b9\16\15"+
    "\17\0\2\15\3\0\14\15\1\u0126\14\15\17\0\2\15"+
    "\3\0\10\15\1\170\20\15\17\0\2\15\3\0\6\15"+
    "\1\u01ba\22\15\17\0\2\15\3\0\1\15\1\u01bb\27\15"+
    "\17\0\2\15\3\0\2\15\1\u01bc\26\15\17\0\2\15"+
    "\3\0\3\15\1\u0124\3\15\1\u01bd\21\15\17\0\2\15"+
    "\3\0\1\15\1\202\27\15\17\0\2\15\3\0\16\15"+
    "\1\u01be\12\15\17\0\2\15\3\0\15\15\1\u01bf\13\15"+
    "\17\0\2\15\3\0\20\15\1\172\10\15\17\0\2\15"+
    "\3\0\13\15\1\u01c0\15\15\17\0\2\15\3\0\3\15"+
    "\1\u01c1\1\u01c2\24\15\17\0\2\15\3\0\13\15\1\u0124"+
    "\15\15\17\0\2\15\3\0\27\15\1\170\1\15\17\0"+
    "\2\15\3\0\3\15\1\u01c3\25\15\17\0\2\15\3\0"+
    "\7\15\1\u01c4\21\15\17\0\2\15\3\0\13\15\1\200"+
    "\15\15\17\0\2\15\3\0\1\15\1\u01c5\27\15\17\0"+
    "\2\15\3\0\5\15\1\u01c6\23\15\17\0\2\15\3\0"+
    "\1\u01c7\30\15\17\0\2\15\3\0\2\15\1\u01c8\11\15"+
    "\1\u0111\1\15\1\u01c9\12\15\17\0\2\15\3\0\13\15"+
    "\1\170\15\15\17\0\2\15\3\0\14\15\1\u01ca\14\15"+
    "\17\0\2\15\3\0\6\15\1\u01bc\22\15\45\0\1\u01cb"+
    "\36\0\1\u01cc\57\0\1\u01cd\64\0\1\60\60\0\1\u01ce"+
    "\52\0\1\60\41\0\1\u01cf\50\0\1\u0171\70\0\1\60"+
    "\42\0\1\u01d0\73\0\1\u01d1\50\0\1\u01d2\57\0\1\u01d3"+
    "\40\0\1\u01d4\70\0\1\u0159\53\0\1\u01d5\35\0\1\u01d6"+
    "\63\0\1\u01d7\66\0\1\u01d8\50\0\1\u01d9\44\0\1\60"+
    "\70\0\1\u01da\35\0\1\60\65\0\1\u0157\60\0\1\u01db"+
    "\50\0\1\u015a\50\0\1\60\52\0\1\u01dc\47\0\1\u01dd"+
    "\55\0\1\u01de\55\0\1\u0157\3\0\1\u01df\46\0\1\271"+
    "\70\0\1\u01e0\57\0\1\261\47\0\1\u01e1\44\0\1\u01e2"+
    "\1\u01e3\63\0\1\u0157\70\0\1\60\30\0\1\u01e4\60\0"+
    "\1\u01e5\60\0\1\267\42\0\1\u01e6\60\0\1\u01e7\47\0"+
    "\1\u01e8\56\0\1\u01e9\11\0\1\u0146\1\0\1\u01ea\51\0"+
    "\1\60\55\0\1\u01eb\46\0\1\u01de\67\0\1\u01ec\36\0"+
    "\1\u01ed\57\0\1\u01ee\64\0\1\113\60\0\1\u01ef\52\0"+
    "\1\113\41\0\1\u01f0\50\0\1\u01a2\70\0\1\113\42\0"+
    "\1\u01f1\73\0\1\u01f2\50\0\1\u01f3\57\0\1\u01f4\40\0"+
    "\1\u01f5\70\0\1\u018a\53\0\1\u01f6\35\0\1\u01f7\63\0"+
    "\1\u01f8\66\0\1\u01f9\50\0\1\u01fa\44\0\1\113\70\0"+
    "\1\u01fb\35\0\1\113\65\0\1\u0188\60\0\1\u01fc\50\0"+
    "\1\u018b\50\0\1\113\52\0\1\u01fd\47\0\1\u01fe\55\0"+
    "\1\u01ff\55\0\1\u0188\3\0\1\u0200\46\0\1\352\70\0"+
    "\1\u0201\57\0\1\342\47\0\1\u0202\44\0\1\u0203\1\u0204"+
    "\63\0\1\u0188\70\0\1\113\30\0\1\u0205\60\0\1\u0206"+
    "\60\0\1\350\42\0\1\u0207\60\0\1\u0208\47\0\1\u0209"+
    "\56\0\1\u020a\11\0\1\u0177\1\0\1\u020b\51\0\1\113"+
    "\55\0\1\u020c\46\0\1\u01ff\41\0\2\15\3\0\4\15"+
    "\1\u01b9\24\15\17\0\2\15\3\0\3\15\1\u020d\25\15"+
    "\17\0\2\15\3\0\1\15\1\u020e\27\15\17\0\2\15"+
    "\3\0\13\15\1\u020f\15\15\17\0\2\15\3\0\13\15"+
    "\1\u0210\15\15\17\0\2\15\3\0\1\15\1\u0211\1\15"+
    "\1\u0212\1\u0213\14\15\1\u0214\7\15\17\0\2\15\3\0"+
    "\4\15\1\u0215\24\15\17\0\2\15\3\0\10\15\1\u0216"+
    "\20\15\17\0\2\15\3\0\6\15\1\u0116\22\15\17\0"+
    "\2\15\3\0\4\15\1\u0217\24\15\17\0\2\15\3\0"+
    "\3\15\1\u0218\25\15\17\0\2\15\3\0\6\15\1\u0219"+
    "\22\15\17\0\2\15\3\0\23\15\1\170\5\15\17\0"+
    "\2\15\3\0\6\15\1\u0126\22\15\17\0\2\15\3\0"+
    "\21\15\1\u0126\7\15\17\0\2\15\3\0\22\15\1\u0126"+
    "\6\15\17\0\2\15\3\0\4\15\1\u0126\24\15\17\0"+
    "\2\15\3\0\4\15\1\u011e\24\15\17\0\2\15\3\0"+
    "\22\15\1\u01bc\6\15\17\0\2\15\3\0\6\15\1\200"+
    "\22\15\17\0\2\15\3\0\3\15\1\u021a\25\15\17\0"+
    "\2\15\3\0\11\15\1\u0126\17\15\17\0\2\15\3\0"+
    "\3\15\1\u0140\25\15\17\0\2\15\3\0\25\15\1\u0126"+
    "\3\15\17\0\2\15\3\0\3\15\1\u021b\25\15\17\0"+
    "\2\15\3\0\10\15\1\u021c\20\15\17\0\2\15\3\0"+
    "\7\15\1\u021d\21\15\17\0\2\15\3\0\10\15\1\233"+
    "\20\15\17\0\2\15\3\0\7\15\1\u021e\7\15\1\170"+
    "\11\15\17\0\2\15\3\0\5\15\1\u0124\23\15\17\0"+
    "\2\15\3\0\20\15\1\u021f\10\15\17\0\2\15\3\0"+
    "\4\15\1\226\24\15\17\0\2\15\3\0\3\15\1\u011d"+
    "\25\15\17\0\2\15\3\0\7\15\1\u0124\21\15\17\0"+
    "\2\15\3\0\1\15\1\u0220\27\15\17\0\2\15\3\0"+
    "\13\15\1\u01c6\15\15\17\0\2\15\3\0\21\15\1\u0221"+
    "\7\15\27\0\1\u0222\64\0\1\u0223\54\0\1\u0224\42\0"+
    "\1\u0225\1\0\1\u0226\1\u0227\14\0\1\u0228\37\0\1\u0229"+
    "\60\0\1\u022a\52\0\1\u014b\52\0\1\u022b\56\0\1\u022c"+
    "\71\0\1\60\37\0\1\u015a\67\0\1\u015a\55\0\1\u015a"+
    "\36\0\1\u015a\54\0\1\u0152\72\0\1\u01de\40\0\1\267"+
    "\51\0\1\u0159\62\0\1\u015a\46\0\1\u0171\76\0\1\u015a"+
    "\37\0\1\u022d\53\0\1\u022e\55\0\1\317\53\0\1\u022f"+
    "\7\0\1\60\42\0\1\u0157\67\0\1\u0230\40\0\1\313"+
    "\53\0\1\u0151\60\0\1\u0157\46\0\1\u0231\66\0\1\u01e7"+
    "\62\0\1\u0232\36\0\1\u0233\64\0\1\u0234\54\0\1\u0235"+
    "\42\0\1\u0236\1\0\1\u0237\1\u0238\14\0\1\u0239\37\0"+
    "\1\u023a\60\0\1\u023b\52\0\1\u017c\52\0\1\u023c\56\0"+
    "\1\u023d\71\0\1\113\37\0\1\u018b\67\0\1\u018b\55\0"+
    "\1\u018b\36\0\1\u018b\54\0\1\u0183\72\0\1\u01ff\40\0"+
    "\1\350\51\0\1\u018a\62\0\1\u018b\46\0\1\u01a2\76\0"+
    "\1\u018b\37\0\1\u023e\53\0\1\u023f\55\0\1\u0100\53\0"+
    "\1\u0240\7\0\1\113\42\0\1\u0188\67\0\1\u0241\40\0"+
    "\1\374\53\0\1\u0182\60\0\1\u0188\46\0\1\u0242\66\0"+
    "\1\u0208\62\0\1\u0243\26\0\2\15\3\0\1\u012d\1\u0244"+
    "\1\u01c8\11\15\1\u0111\14\15\17\0\2\15\3\0\2\15"+
    "\1\u0139\26\15\17\0\2\15\3\0\12\15\1\u0245\16\15"+
    "\17\0\2\15\3\0\1\15\1\u0246\12\15\1\u01c3\14\15"+
    "\17\0\2\15\3\0\11\15\1\u01bc\17\15\17\0\2\15"+
    "\3\0\10\15\1\u0247\20\15\17\0\2\15\3\0\3\15"+
    "\1\u0248\25\15\17\0\2\15\3\0\6\15\1\u0249\22\15"+
    "\17\0\2\15\3\0\7\15\1\u011c\21\15\17\0\2\15"+
    "\3\0\2\15\1\152\26\15\17\0\2\15\3\0\3\15"+
    "\1\u01b2\25\15\17\0\2\15\3\0\5\15\1\u024a\23\15"+
    "\17\0\2\15\3\0\13\15\1\u024b\15\15\17\0\2\15"+
    "\3\0\13\15\1\u024c\15\15\17\0\2\15\3\0\20\15"+
    "\1\u024d\10\15\17\0\2\15\3\0\24\15\1\u024e\4\15"+
    "\17\0\2\15\3\0\5\15\1\u024f\23\15\17\0\2\15"+
    "\3\0\4\15\1\u0250\24\15\17\0\2\15\3\0\12\15"+
    "\1\u012b\16\15\17\0\2\15\3\0\1\15\1\u0127\5\15"+
    "\1\u012b\21\15\24\0\1\u0160\1\u0251\1\u01e9\11\0\1\u0146"+
    "\52\0\1\u0252\43\0\1\u0253\12\0\1\u01e4\51\0\1\u01de"+
    "\53\0\1\u0254\47\0\1\u0255\57\0\1\u0256\55\0\1\u0150"+
    "\47\0\1\u0159\55\0\1\u01d5\64\0\1\u0257\61\0\1\u0258"+
    "\60\0\1\u0259\35\0\1\u025a\53\0\1\u025b\62\0\1\u015e"+
    "\43\0\1\u015b\5\0\1\u015e\45\0\1\u0191\1\u025c\1\u020a"+
    "\11\0\1\u0177\52\0\1\u025d\43\0\1\u025e\12\0\1\u0205"+
    "\51\0\1\u01ff\53\0\1\u025f\47\0\1\u0260\57\0\1\u0261"+
    "\55\0\1\u0181\47\0\1\u018a\55\0\1\u01f6\64\0\1\u0262"+
    "\61\0\1\u0263\60\0\1\u0264\35\0\1\u0265\53\0\1\u0266"+
    "\62\0\1\u018f\43\0\1\u018c\5\0\1\u018f\40\0\2\15"+
    "\3\0\11\15\1\u01bc\2\15\1\u0124\14\15\17\0\2\15"+
    "\3\0\7\15\1\u01b3\21\15\17\0\2\15\3\0\17\15"+
    "\1\170\11\15\17\0\2\15\3\0\2\15\1\170\3\15"+
    "\1\u01bc\22\15\17\0\2\15\3\0\20\15\1\u01bb\10\15"+
    "\17\0\2\15\3\0\20\15\1\u0136\10\15\17\0\2\15"+
    "\3\0\6\15\1\u0267\22\15\17\0\2\15\3\0\14\15"+
    "\1\u01c3\14\15\17\0\2\15\3\0\6\15\1\u0268\22\15"+
    "\17\0\2\15\3\0\1\u0126\30\15\17\0\2\15\3\0"+
    "\14\15\1\u01b2\14\15\17\0\2\15\3\0\20\15\1\u0269"+
    "\10\15\17\0\2\15\3\0\7\15\1\u01bd\21\15\35\0"+
    "\1\u01de\2\0\1\u0157\47\0\1\u01d6\64\0\1\60\37\0"+
    "\1\60\3\0\1\u01de\66\0\1\u01dd\54\0\1\u0168\50\0"+
    "\1\u01e4\40\0\1\u015a\70\0\1\u01d5\60\0\1\u026a\43\0"+
    "\1\u01df\56\0\1\u01ff\2\0\1\u0188\47\0\1\u01f7\64\0"+
    "\1\113\37\0\1\113\3\0\1\u01ff\66\0\1\u01fe\54\0"+
    "\1\u0199\50\0\1\u0205\40\0\1\u018b\70\0\1\u01f6\60\0"+
    "\1\u026b\43\0\1\u0200\40\0\2\15\3\0\7\15\1\u026c"+
    "\21\15\17\0\2\15\3\0\17\15\1\u0139\11\15\17\0"+
    "\2\15\3\0\6\15\1\u026d\22\15\32\0\1\u026e\54\0"+
    "\1\u026f\41\0\2\15\3\0\1\15\1\u0270\27\15\17\0"+
    "\2\15\3\0\7\15\1\u0271\21\15\33\0\1\u0272\54\0"+
    "\1\u0273\40\0\2\15\3\0\10\15\1\u01b9\20\15\17\0"+
    "\2\15\3\0\1\15\1\u012b\27\15\25\0\1\u015e\54\0"+
    "\1\u018f\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26910];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\34\1\12\11\32\1\1\11\37\1\1\11"+
    "\3\1\2\0\1\11\3\0\65\1\142\0\67\1\142\0"+
    "\46\1\3\0\1\1\40\0\1\1\35\0\25\1\20\0"+
    "\1\1\20\0\16\1\26\0\3\1\2\0\2\1\2\0"+
    "\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[627];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _CoocooLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  protected abstract void readJavaScript(int state) throws java.io.IOException;
  protected abstract void readMultilineJavaScript(int state) throws java.io.IOException;


  _CoocooLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CoocooLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(GETTER); return PROPERTY_GETTER;
          }
        case 28: break;
        case 6: 
          { yybegin(YYINITIAL); return SUBCOOCOO;
          }
        case 29: break;
        case 27: 
          { yybegin(CLASS); return KEYWORD;
          }
        case 30: break;
        case 25: 
          { return COMMENT;
          }
        case 31: break;
        case 10: 
          { yybegin(TYPE); return TYPIFICATION;
          }
        case 32: break;
        case 23: 
          { yybegin(AFTER); return KEYWORD;
          }
        case 33: break;
        case 8: 
          { yybegin(GETTER); return VARIABLE_GETTER;
          }
        case 34: break;
        case 20: 
          { yybegin(YYINITIAL); return NULLABLE;
          }
        case 35: break;
        case 21: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 36: break;
        case 15: 
          { return JAVASCRIPT;
          }
        case 37: break;
        case 14: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(AFTER); return JAVASCRIPT;
          }
        case 38: break;
        case 3: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 39: break;
        case 11: 
          { yybegin(AFTER); return TYPIFICATION;
          }
        case 40: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 41: break;
        case 7: 
          { yybegin(AFTER); return SUBCOOCOO;
          }
        case 42: break;
        case 17: 
          { return WHITE_SPACE;
          }
        case 43: break;
        case 22: 
          { yybegin(AFTER); return STRING;
          }
        case 44: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 45: break;
        case 19: 
          { yybegin(AFTER); return COONAME;
          }
        case 46: break;
        case 26: 
          { yybegin(NAME); return KEYWORD;
          }
        case 47: break;
        case 5: 
          { return PUSHER;
          }
        case 48: break;
        case 12: 
          { yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 49: break;
        case 16: 
          { yybegin(AFTER); return VARIABLE;
          }
        case 50: break;
        case 13: 
          { return JAVASCRIPT_END;
          }
        case 51: break;
        case 4: 
          { yybegin(AFTER); return IDENTIFIER;
          }
        case 52: break;
        case 24: 
          { yybegin(IN_JAVASCRIPT2); readMultilineJavaScript(YYINITIAL); return KEYWORD;
          }
        case 53: break;
        case 18: 
          { yybegin(AFTER); return COOCLASS;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
