/* The following code was generated by JFlex 1.4.3 on 2/15/14 5:17 PM */

package com.hoho.coocoo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.coocoo.psi.CoocooTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/15/14 5:17 PM from the specification file
 * <tt>/Users/hoho/Work/coocooPlugin/src/com/hoho/coocoo/Coocoo.flex</tt>
 */
abstract class _CoocooLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_UJAVASCRIPT = 6;
  public static final int IN_TEMPLATE = 10;
  public static final int IN_CALL = 14;
  public static final int IN_VAR_DECL = 12;
  public static final int IN_JAVASCRIPT = 2;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int AFTER_SOMETHING = 18;
  public static final int IN_BAD = 16;
  public static final int YYINITIAL = 0;
  public static final int IN_UJAVASCRIPT2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  2,  2,  4,  4,  5,  5,  6,  6, 
     7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\10"+
    "\1\36\1\0\1\42\1\0\1\12\1\43\1\44\1\35\2\0\1\5"+
    "\1\36\1\34\12\7\3\0\1\40\2\0\1\50\1\13\1\4\1\14"+
    "\1\31\1\23\1\4\1\33\1\20\1\25\2\4\1\17\1\32\1\26"+
    "\1\21\1\27\1\4\1\16\1\22\1\15\2\4\1\24\1\4\1\30"+
    "\1\4\1\37\1\11\1\41\1\0\1\6\1\0\32\47\1\45\1\0"+
    "\1\46\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\1\20\5\20\6"+
    "\20\7\1\10\13\1\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\3\17\1\20\1\0\1\21\23\0\1\5"+
    "\23\0\1\6\23\0\1\7\2\0\1\22\3\0\1\22"+
    "\25\0\1\13\1\0\1\17\43\0\1\22\2\0\1\23"+
    "\5\0\1\24\4\0\1\25\1\12\1\13\1\0\1\13"+
    "\2\0\1\16\1\17\1\0\1\21\4\0\1\5\4\0"+
    "\1\6\4\0\1\7\4\0\1\26\5\0\1\13\3\0"+
    "\1\17\36\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u0171\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u0171\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u0171\0\u070c"+
    "\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854"+
    "\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c"+
    "\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0215\0\u0d22\0\u0d4b"+
    "\0\u0453\0\u0290\0\u0d74\0\u02b9\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u06ba\0\u04f7\0\u102d\0\u0520"+
    "\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175"+
    "\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd"+
    "\0\u0921\0\u075e\0\u12e6\0\u0787\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2"+
    "\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a"+
    "\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739\0\u1762"+
    "\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881\0\u18aa"+
    "\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9\0\u0bda"+
    "\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11"+
    "\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59"+
    "\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78\0\u1da1"+
    "\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9"+
    "\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u0171\0\u1fdf\0\u2008"+
    "\0\u0171\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5\0\u0171\0\u20fe"+
    "\0\u2127\0\u2150\0\u2179\0\u0171\0\u0171\0\u21a2\0\u21cb\0\u21f4"+
    "\0\u221d\0\u2246\0\u0171\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313"+
    "\0\u233c\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b"+
    "\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551\0\u257a\0\u25a3"+
    "\0\u25cc\0\u0171\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\u26c2"+
    "\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8\0\u27e1\0\u280a"+
    "\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\u2952"+
    "\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48\0\u2a71\0\u2a9a"+
    "\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90\0\u2bb9\0\u2be2"+
    "\0\u2c0b\0\u2c34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\6\12\21\15\1\16\12\12"+
    "\1\15\1\12\1\17\2\20\1\21\4\17\1\22\1\17"+
    "\1\23\1\24\1\25\1\26\3\17\1\27\1\30\1\31"+
    "\1\32\2\17\1\33\2\17\1\34\1\17\1\35\13\17"+
    "\1\36\1\37\2\40\1\41\4\37\1\42\1\37\1\43"+
    "\1\44\1\45\1\46\3\37\1\47\1\50\1\51\1\52"+
    "\2\37\1\53\2\37\1\54\1\37\1\55\13\37\1\56"+
    "\1\57\2\60\1\61\4\57\1\62\1\57\1\63\1\64"+
    "\1\65\1\66\3\57\1\67\1\70\1\71\1\72\2\57"+
    "\1\73\2\57\1\74\1\57\1\75\13\57\1\76\1\12"+
    "\2\13\1\77\4\12\1\100\1\12\1\101\1\102\1\103"+
    "\1\104\3\12\1\105\1\106\1\107\1\110\2\12\1\111"+
    "\2\12\1\112\1\12\1\16\6\12\1\113\1\114\2\12"+
    "\1\115\1\116\1\12\2\13\1\77\1\117\1\12\1\117"+
    "\1\12\1\100\1\12\1\101\21\117\1\16\6\12\1\113"+
    "\1\114\2\12\1\117\2\12\2\13\1\77\1\120\6\12"+
    "\21\120\1\16\6\12\1\113\1\121\2\12\1\120\1\12"+
    "\1\122\2\13\1\123\30\122\1\124\14\122\1\12\2\13"+
    "\1\125\30\12\1\16\14\12\52\0\2\13\51\0\1\14"+
    "\30\0\1\126\20\0\4\15\3\0\21\15\13\0\1\15"+
    "\35\0\1\127\1\130\14\0\2\20\51\0\1\21\30\0"+
    "\1\131\14\0\1\132\2\0\5\132\1\17\1\133\37\132"+
    "\1\134\2\0\6\134\1\135\1\17\36\134\14\0\1\136"+
    "\1\137\46\0\1\140\4\0\1\141\46\0\1\142\4\0"+
    "\1\143\42\0\1\144\56\0\1\136\40\0\1\145\3\0"+
    "\1\146\51\0\1\147\4\0\1\150\36\0\1\151\60\0"+
    "\1\152\61\0\1\153\1\154\17\0\3\36\4\0\21\36"+
    "\13\0\1\36\2\0\2\40\51\0\1\41\30\0\1\155"+
    "\14\0\1\156\2\0\5\156\1\37\1\157\37\156\1\160"+
    "\2\0\6\160\1\161\1\37\36\160\14\0\1\162\1\163"+
    "\46\0\1\164\4\0\1\165\46\0\1\166\4\0\1\167"+
    "\42\0\1\170\56\0\1\162\40\0\1\171\3\0\1\172"+
    "\51\0\1\173\4\0\1\174\36\0\1\175\60\0\1\176"+
    "\61\0\1\177\1\200\17\0\3\56\4\0\21\56\13\0"+
    "\1\56\2\0\2\60\51\0\1\61\30\0\1\201\14\0"+
    "\1\202\2\0\5\202\1\57\1\203\37\202\1\204\2\0"+
    "\6\204\1\205\1\57\36\204\14\0\1\206\1\207\46\0"+
    "\1\210\4\0\1\211\46\0\1\212\4\0\1\213\42\0"+
    "\1\214\56\0\1\206\40\0\1\215\3\0\1\216\51\0"+
    "\1\217\4\0\1\220\36\0\1\221\60\0\1\222\61\0"+
    "\1\223\1\224\17\0\3\76\4\0\21\76\13\0\1\76"+
    "\4\0\1\77\30\0\1\126\14\0\1\225\2\0\5\225"+
    "\1\226\1\227\37\225\1\230\2\0\6\230\1\231\1\232"+
    "\36\230\14\0\1\233\1\234\46\0\1\235\4\0\1\236"+
    "\46\0\1\237\4\0\1\240\42\0\1\241\56\0\1\242"+
    "\40\0\1\243\3\0\1\244\51\0\1\245\4\0\1\246"+
    "\36\0\1\247\60\0\1\250\70\0\1\251\51\0\1\252"+
    "\11\0\3\115\26\0\1\253\1\254\2\0\1\255\1\256"+
    "\1\0\1\257\1\0\1\115\5\0\3\260\4\0\21\260"+
    "\13\0\1\260\5\0\1\117\1\0\2\117\3\0\21\117"+
    "\13\0\1\117\5\0\4\120\3\0\21\120\13\0\1\120"+
    "\45\0\1\261\4\0\1\122\2\0\47\122\2\0\1\123"+
    "\30\122\1\124\15\122\2\0\32\122\1\262\13\122\3\0"+
    "\1\125\30\0\1\126\14\0\1\127\2\0\46\127\35\263"+
    "\1\264\13\263\2\132\1\0\46\132\2\134\1\0\46\134"+
    "\15\0\1\17\50\0\1\265\52\0\1\266\52\0\1\267"+
    "\54\0\1\270\45\0\1\136\46\0\1\271\44\0\1\272"+
    "\56\0\1\273\51\0\1\274\42\0\1\272\63\0\1\275"+
    "\52\0\1\17\16\0\1\153\2\0\46\153\35\276\1\277"+
    "\13\276\2\156\1\0\46\156\2\160\1\0\46\160\15\0"+
    "\1\37\50\0\1\300\52\0\1\301\52\0\1\302\54\0"+
    "\1\303\45\0\1\162\46\0\1\304\44\0\1\305\56\0"+
    "\1\306\51\0\1\307\42\0\1\305\63\0\1\310\52\0"+
    "\1\37\16\0\1\177\2\0\46\177\35\311\1\312\13\311"+
    "\2\202\1\0\46\202\2\204\1\0\46\204\15\0\1\57"+
    "\50\0\1\313\52\0\1\314\52\0\1\315\54\0\1\316"+
    "\45\0\1\206\46\0\1\317\44\0\1\320\56\0\1\321"+
    "\51\0\1\322\42\0\1\320\63\0\1\323\52\0\1\57"+
    "\16\0\1\223\2\0\46\223\35\324\1\325\13\324\1\225"+
    "\2\0\5\225\1\326\1\227\37\225\10\0\1\327\40\0"+
    "\2\225\1\0\46\225\1\230\2\0\6\230\1\231\1\326"+
    "\40\230\1\0\46\230\12\0\1\330\53\0\1\331\50\0"+
    "\1\332\52\0\1\333\52\0\1\334\54\0\1\335\45\0"+
    "\1\233\46\0\1\336\45\0\1\337\47\0\1\340\56\0"+
    "\1\341\51\0\1\342\42\0\1\340\63\0\1\343\52\0"+
    "\1\331\61\0\1\344\51\0\1\345\10\0\4\346\3\0"+
    "\21\346\13\0\1\346\4\0\1\254\4\347\3\0\21\347"+
    "\13\0\1\347\5\0\2\350\1\0\1\350\3\0\21\350"+
    "\13\0\1\350\4\0\1\256\2\351\1\0\1\351\3\0"+
    "\21\351\13\0\1\351\4\0\1\257\2\352\1\0\1\352"+
    "\3\0\21\352\13\0\1\352\45\0\1\353\4\0\1\354"+
    "\2\263\32\354\1\122\13\354\35\263\1\355\13\263\34\0"+
    "\1\356\1\264\31\0\1\17\51\0\1\17\52\0\1\146"+
    "\62\0\1\357\40\0\1\360\45\0\1\17\53\0\1\17"+
    "\53\0\1\17\41\0\1\361\31\0\35\276\1\362\13\276"+
    "\34\0\1\363\1\277\31\0\1\37\51\0\1\37\52\0"+
    "\1\172\62\0\1\364\40\0\1\365\45\0\1\37\53\0"+
    "\1\37\53\0\1\37\41\0\1\366\31\0\35\311\1\367"+
    "\13\311\34\0\1\370\1\312\31\0\1\57\51\0\1\57"+
    "\52\0\1\216\62\0\1\371\40\0\1\372\45\0\1\57"+
    "\53\0\1\57\53\0\1\57\41\0\1\373\31\0\35\324"+
    "\1\374\13\324\34\0\1\375\1\325\13\0\1\327\2\0"+
    "\5\327\1\376\1\377\37\327\1\330\2\0\6\330\1\u0100"+
    "\1\u0101\36\330\16\0\1\331\51\0\1\u0102\52\0\1\244"+
    "\62\0\1\u0103\40\0\1\u0104\45\0\1\337\53\0\1\331"+
    "\53\0\1\331\41\0\1\u0105\35\0\4\346\3\0\21\346"+
    "\2\0\1\253\1\254\2\0\1\255\1\256\1\0\1\257"+
    "\1\0\1\346\4\0\1\u0106\4\347\3\0\21\347\4\0"+
    "\1\u0107\1\u0108\5\0\1\347\5\0\2\350\1\0\1\350"+
    "\3\0\21\350\2\0\1\253\1\254\2\0\1\255\1\256"+
    "\1\0\1\257\1\0\1\350\4\0\1\u0109\2\351\1\0"+
    "\1\351\3\0\21\351\10\0\1\u0108\2\0\1\351\4\0"+
    "\1\u010a\2\352\1\0\1\352\3\0\21\352\4\0\1\u010b"+
    "\5\0\1\u0108\1\352\1\0\1\354\2\263\32\354\1\u010c"+
    "\13\354\34\263\1\356\1\355\13\263\3\0\1\356\100\0"+
    "\1\u010d\33\0\1\u010e\53\0\1\u010f\27\0\34\276\1\363"+
    "\1\362\13\276\3\0\1\363\100\0\1\u0110\33\0\1\u0111"+
    "\53\0\1\u0112\27\0\34\311\1\370\1\367\13\311\3\0"+
    "\1\370\100\0\1\u0113\33\0\1\u0114\53\0\1\u0115\27\0"+
    "\34\324\1\375\1\374\13\324\3\0\1\375\55\0\1\u0116"+
    "\40\0\2\327\1\0\46\327\2\330\1\0\46\330\12\0"+
    "\1\u0117\71\0\1\u0118\33\0\1\u0119\53\0\1\u011a\32\0"+
    "\1\u0106\34\0\1\u0107\1\u0108\12\0\1\u0107\4\u011b\1\u011c"+
    "\1\0\1\u011d\21\u011b\13\0\1\u011b\37\0\1\253\1\254"+
    "\2\0\1\255\1\256\1\0\1\257\6\0\1\u0109\40\0"+
    "\1\u0108\7\0\1\u010a\34\0\1\u010b\5\0\1\u0108\5\0"+
    "\1\u010b\2\u011e\1\0\1\u011e\3\0\21\u011e\13\0\1\u011e"+
    "\1\0\1\354\2\263\31\354\1\122\1\u010c\13\354\23\0"+
    "\1\265\51\0\1\u011f\37\0\1\u0120\60\0\1\300\51\0"+
    "\1\u0121\37\0\1\u0122\60\0\1\313\51\0\1\u0123\37\0"+
    "\1\u0124\45\0\1\326\52\0\1\326\61\0\1\332\51\0"+
    "\1\u0125\37\0\1\u0126\40\0\1\u0127\4\u011b\3\0\21\u011b"+
    "\5\0\1\u0108\5\0\1\u011b\1\0\1\u011c\2\0\5\u011c"+
    "\1\u0127\1\u0128\37\u011c\1\u011d\2\0\6\u011d\1\u0129\1\u0127"+
    "\36\u011d\3\0\1\u012a\2\u011e\1\0\1\u011e\3\0\21\u011e"+
    "\12\0\1\u0108\1\u011e\26\0\1\146\54\0\1\17\44\0"+
    "\1\172\54\0\1\37\44\0\1\216\54\0\1\57\44\0"+
    "\1\244\54\0\1\331\22\0\1\u0127\35\0\1\u0108\7\0"+
    "\2\u011c\1\0\46\u011c\2\u011d\1\0\46\u011d\3\0\1\u012a"+
    "\42\0\1\u0108\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11357];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\17\1\1\11\17\1\1\11"+
    "\46\1\1\0\1\1\23\0\1\1\23\0\1\1\23\0"+
    "\1\1\2\0\1\1\3\0\1\1\25\0\1\1\1\0"+
    "\1\1\43\0\1\11\2\0\1\11\5\0\1\11\4\0"+
    "\2\11\1\1\1\0\1\1\2\0\1\11\1\1\1\0"+
    "\1\1\4\0\1\1\4\0\1\1\4\0\1\1\4\0"+
    "\1\11\5\0\1\1\3\0\1\1\36\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _CoocooLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private int afterJavaScript = YYINITIAL;
  private int afterSomething = IN_TEMPLATE;

  protected abstract void readJavaScript(int state) throws java.io.IOException;


  _CoocooLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CoocooLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return VARIABLE;
          }
        case 23: break;
        case 17: 
          { return COMMENT;
          }
        case 24: break;
        case 11: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return CSS;
          }
        case 25: break;
        case 4: 
          { yybegin(IN_VAR_DECL); return TEMPLATE_NAME;
          }
        case 26: break;
        case 19: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 27: break;
        case 5: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 28: break;
        case 15: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 29: break;
        case 6: 
          { return JAVASCRIPT;
          }
        case 30: break;
        case 16: 
          { yybegin(afterSomething); return WHITE_SPACE;
          }
        case 31: break;
        case 13: 
          { yybegin(IN_TEMPLATE); return TEMPLATE_NAME;
          }
        case 32: break;
        case 21: 
          { afterJavaScript = yystate(); yybegin(IN_UJAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 33: break;
        case 7: 
          { yybegin(IN_UJAVASCRIPT2); readJavaScript(afterJavaScript); return JAVASCRIPT;
          }
        case 34: break;
        case 18: 
          { afterSomething = yystate(); yybegin(AFTER_SOMETHING); return STRING;
          }
        case 35: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 36: break;
        case 9: 
          { afterJavaScript = yystate(); yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 37: break;
        case 8: 
          { return WHITE_SPACE;
          }
        case 38: break;
        case 3: 
          { yybegin(IN_TEMPLATE); return WHITE_SPACE;
          }
        case 39: break;
        case 14: 
          { yybegin(IN_TEMPLATE); return JAVASCRIPT_END;
          }
        case 40: break;
        case 22: 
          { afterSomething = IN_CALL; yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 41: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 42: break;
        case 20: 
          { afterSomething = IN_VAR_DECL; yybegin(AFTER_SOMETHING); return KEYWORD;
          }
        case 43: break;
        case 10: 
          { return JAVASCRIPT_END;
          }
        case 44: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
