/* The following code was generated by JFlex 1.4.3 on 3/31/14 1:12 PM */

package com.hoho.coocoo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.coocoo.psi.CoocooTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/31/14 1:12 PM from the specification file
 * <tt>/Users/hoho/Work/coocooPlugin/src/com/hoho/coocoo/Coocoo.flex</tt>
 */
abstract class _CoocooLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int CLASS = 10;
  public static final int IN_BAD = 14;
  public static final int GETTER = 8;
  public static final int AFTER = 6;
  public static final int IN_JAVASCRIPT = 2;
  public static final int TYPE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\1\0\1\45\2\0\1\10\1\53\1\54\1\42\1\42\3\0\1\41"+
    "\12\5\2\0\1\47\1\50\1\51\1\52\1\46\32\4\1\43\1\7"+
    "\1\44\1\50\1\4\1\0\1\30\1\37\1\16\1\13\1\14\1\36"+
    "\1\31\1\34\1\20\1\35\1\4\1\15\1\11\1\21\1\12\1\32"+
    "\1\4\1\24\1\27\1\17\1\25\1\22\1\23\1\26\1\33\1\40"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\2\1\23\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\30\17\30\20\1\21\1\22\1\23\1\4"+
    "\1\24\3\25\2\0\1\26\3\0\2\4\1\27\43\4"+
    "\1\30\2\4\1\31\5\0\1\17\51\0\1\20\44\0"+
    "\1\27\44\4\106\0\20\4\1\32\10\4\54\0\6\4"+
    "\1\32\4\4\22\0\12\4\20\0\3\4\4\0\2\4"+
    "\2\0\2\4\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u05cd\0\u0168\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u05cd\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0168\0\u0e6a\0\u0e97\0\u0ec4\0\u05cd\0\u021c\0\u0168\0\u0ef1"+
    "\0\u0249\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u01ef\0\u15f9\0\u1626\0\u1653\0\u0654\0\u1680\0\u0681\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u0a32\0\u1d88"+
    "\0\u0a5f\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3"+
    "\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b"+
    "\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193"+
    "\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb"+
    "\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463"+
    "\0\u01ef\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e"+
    "\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706"+
    "\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e"+
    "\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6"+
    "\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e"+
    "\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6"+
    "\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u097e\0\u2de1"+
    "\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u08f7\0\u2eef\0\u2f1c"+
    "\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084"+
    "\0\u30b1\0\u30de\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec"+
    "\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354"+
    "\0\u3381\0\u0d5c\0\u33ae\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f"+
    "\0\u0cd5\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d\0\u35ca"+
    "\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u3732"+
    "\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a"+
    "\0\u38c7\0\u38f4\0\u3921\0\u01ef\0\u394e\0\u397b\0\u39a8\0\u39d5"+
    "\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d"+
    "\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5"+
    "\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d"+
    "\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75"+
    "\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u4083\0\u40b0\0\u40dd"+
    "\0\u410a\0\u4137\0\u4164\0\u4191\0\u41be\0\u41eb\0\u4218\0\u4245"+
    "\0\u4272\0\u429f\0\u42cc\0\u42f9\0\u4326\0\u4353\0\u0e3d\0\u4380"+
    "\0\u43ad\0\u43da\0\u4407\0\u4434\0\u4461\0\u448e\0\u44bb\0\u44e8"+
    "\0\u4515\0\u4542\0\u456f\0\u459c\0\u45c9\0\u45f6\0\u4623\0\u4650"+
    "\0\u467d\0\u46aa\0\u46d7\0\u4704\0\u4731\0\u475e\0\u478b\0\u47b8"+
    "\0\u47e5\0\u4812\0\u483f\0\u486c\0\u4899\0\u48c6\0\u48f3\0\u4920"+
    "\0\u494d\0\u497a\0\u49a7\0\u49d4\0\u4a01\0\u4a2e\0\u4a5b\0\u4a88"+
    "\0\u4ab5\0\u4ae2\0\u4b0f\0\u4b3c\0\u4b69\0\u4b96\0\u4bc3\0\u4bf0"+
    "\0\u4c1d\0\u4c4a\0\u4c77\0\u4ca4\0\u4cd1\0\u4cfe\0\u4d2b\0\u4d58"+
    "\0\u4d85\0\u4db2\0\u4ddf\0\u4e0c\0\u4e39\0\u4e66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\1\14\1\11\1\15\1\11\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\14"+
    "\1\26\1\27\1\30\1\31\1\32\1\14\1\33\1\34"+
    "\1\35\1\36\1\14\1\37\1\40\1\41\2\14\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\11\1\53\1\54\1\55\2\56\1\57\2\55\1\60"+
    "\1\55\1\61\1\55\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\55\1\70\1\71\1\72\1\73\1\74\1\55"+
    "\1\75\1\76\1\77\1\100\1\55\1\101\1\102\1\103"+
    "\2\55\1\104\13\55\1\105\2\106\1\107\2\105\1\110"+
    "\1\105\1\111\1\105\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\105\1\120\1\121\1\122\1\123\1\124\1\105"+
    "\1\125\1\126\1\127\1\130\1\105\1\131\1\132\1\133"+
    "\2\105\1\134\13\105\1\11\2\12\1\13\35\11\1\42"+
    "\2\11\1\45\2\11\1\50\1\11\1\52\2\11\1\54"+
    "\1\11\2\12\1\13\1\135\4\11\30\135\1\42\12\11"+
    "\1\54\1\11\2\12\1\136\1\137\4\11\30\137\1\42"+
    "\1\11\1\44\1\45\1\46\1\47\5\11\1\54\1\11"+
    "\2\12\1\136\1\14\4\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\14\1\26\1\27\1\30\1\31"+
    "\1\32\1\14\1\33\1\34\1\35\1\36\1\14\1\37"+
    "\1\140\1\41\2\14\1\42\10\11\1\141\1\11\1\54"+
    "\1\142\2\12\1\143\35\142\1\144\13\142\56\0\2\12"+
    "\55\0\1\13\35\0\1\145\17\0\2\14\3\0\30\14"+
    "\14\0\1\146\2\0\3\146\1\147\1\150\45\146\1\151"+
    "\2\0\4\151\1\152\1\147\44\151\4\0\2\14\3\0"+
    "\1\14\1\153\26\14\20\0\2\14\3\0\6\14\1\154"+
    "\1\14\1\155\14\14\1\156\2\14\20\0\2\14\3\0"+
    "\1\14\1\157\1\14\1\160\13\14\1\161\10\14\20\0"+
    "\2\14\3\0\13\14\1\162\1\14\1\163\1\14\1\164"+
    "\10\14\20\0\2\14\3\0\3\14\1\165\24\14\20\0"+
    "\2\14\3\0\1\14\1\166\2\14\1\167\6\14\1\170"+
    "\3\14\1\171\3\14\1\172\4\14\20\0\2\14\3\0"+
    "\1\14\1\173\1\14\1\174\7\14\1\175\6\14\1\176"+
    "\1\177\4\14\20\0\2\14\3\0\1\14\1\200\26\14"+
    "\20\0\2\14\3\0\7\14\1\201\7\14\1\202\10\14"+
    "\20\0\2\14\3\0\23\14\1\203\4\14\20\0\2\14"+
    "\3\0\1\14\1\204\1\14\1\205\24\14\20\0\2\14"+
    "\3\0\13\14\1\206\14\14\20\0\2\14\3\0\3\14"+
    "\1\207\10\14\1\210\13\14\20\0\2\14\3\0\2\14"+
    "\1\211\3\14\1\212\12\14\1\213\2\14\1\214\3\14"+
    "\20\0\2\14\3\0\3\14\1\215\24\14\20\0\2\14"+
    "\3\0\1\14\1\216\15\14\1\217\10\14\20\0\2\14"+
    "\3\0\17\14\1\220\10\14\20\0\2\14\3\0\16\14"+
    "\1\221\11\14\20\0\2\14\3\0\1\14\1\222\5\14"+
    "\1\223\20\14\55\0\1\224\14\0\2\56\55\0\1\57"+
    "\35\0\1\145\13\0\1\225\2\0\3\225\1\55\1\226"+
    "\45\225\1\227\2\0\4\227\1\230\1\55\44\227\17\0"+
    "\1\231\1\0\1\232\14\0\1\233\30\0\1\234\1\0"+
    "\1\235\13\0\1\236\50\0\1\237\1\0\1\240\1\0"+
    "\1\241\40\0\1\242\52\0\1\243\2\0\1\244\6\0"+
    "\1\245\3\0\1\246\3\0\1\247\32\0\1\250\1\0"+
    "\1\251\7\0\1\252\6\0\1\253\1\254\32\0\1\255"+
    "\72\0\1\256\60\0\1\257\32\0\1\260\1\0\1\261"+
    "\64\0\1\262\44\0\1\263\10\0\1\264\42\0\1\265"+
    "\3\0\1\266\12\0\1\267\2\0\1\270\33\0\1\271"+
    "\52\0\1\272\15\0\1\273\54\0\1\274\53\0\1\55"+
    "\37\0\1\275\5\0\1\276\35\0\2\106\55\0\1\107"+
    "\35\0\1\145\13\0\1\277\2\0\3\277\1\105\1\300"+
    "\45\277\1\301\2\0\4\301\1\302\1\105\44\301\17\0"+
    "\1\303\1\0\1\304\14\0\1\305\30\0\1\306\1\0"+
    "\1\307\13\0\1\310\50\0\1\311\1\0\1\312\1\0"+
    "\1\313\40\0\1\314\52\0\1\315\2\0\1\316\6\0"+
    "\1\317\3\0\1\320\3\0\1\321\32\0\1\322\1\0"+
    "\1\323\7\0\1\324\6\0\1\325\1\326\32\0\1\327"+
    "\72\0\1\330\60\0\1\331\32\0\1\332\1\0\1\333"+
    "\64\0\1\334\44\0\1\335\10\0\1\336\42\0\1\337"+
    "\3\0\1\340\12\0\1\341\2\0\1\342\33\0\1\343"+
    "\52\0\1\344\15\0\1\345\54\0\1\346\53\0\1\105"+
    "\37\0\1\347\5\0\1\350\40\0\2\135\3\0\30\135"+
    "\17\0\1\136\35\0\1\145\17\0\2\137\3\0\30\137"+
    "\20\0\2\14\3\0\16\14\1\351\11\14\14\0\1\142"+
    "\2\0\53\142\2\0\1\143\35\142\1\144\14\142\2\0"+
    "\36\142\1\224\13\142\2\146\1\0\52\146\2\151\1\0"+
    "\52\151\4\0\2\14\3\0\2\14\1\352\25\14\20\0"+
    "\2\14\3\0\23\14\1\353\4\14\20\0\2\14\3\0"+
    "\5\14\1\354\22\14\20\0\2\14\3\0\25\14\1\351"+
    "\2\14\20\0\2\14\3\0\1\351\27\14\20\0\2\14"+
    "\3\0\16\14\1\355\11\14\20\0\2\14\3\0\6\14"+
    "\1\356\21\14\20\0\2\14\3\0\13\14\1\357\14\14"+
    "\20\0\2\14\3\0\6\14\1\360\21\14\20\0\2\14"+
    "\3\0\5\14\1\361\22\14\20\0\2\14\3\0\10\14"+
    "\1\362\17\14\20\0\2\14\3\0\1\363\3\14\1\364"+
    "\3\14\1\365\17\14\20\0\2\14\3\0\17\14\1\366"+
    "\10\14\20\0\2\14\3\0\3\14\1\367\24\14\20\0"+
    "\2\14\3\0\4\14\1\206\23\14\20\0\2\14\3\0"+
    "\1\14\1\370\15\14\1\371\10\14\20\0\2\14\3\0"+
    "\20\14\1\372\7\14\20\0\2\14\3\0\1\373\14\14"+
    "\2\215\11\14\20\0\2\14\3\0\7\14\1\374\20\14"+
    "\20\0\2\14\3\0\21\14\1\354\6\14\20\0\2\14"+
    "\3\0\7\14\1\140\20\14\20\0\2\14\3\0\1\375"+
    "\27\14\20\0\2\14\3\0\3\14\1\376\24\14\20\0"+
    "\2\14\3\0\4\14\1\377\23\14\20\0\2\14\3\0"+
    "\3\14\1\u0100\24\14\20\0\2\14\3\0\14\14\1\u0101"+
    "\13\14\20\0\2\14\3\0\1\u0102\7\14\1\u0103\5\14"+
    "\1\35\11\14\20\0\2\14\3\0\4\14\1\351\23\14"+
    "\20\0\2\14\3\0\6\14\1\351\4\14\1\u0104\3\14"+
    "\1\u0105\10\14\20\0\2\14\3\0\5\14\1\u0106\13\14"+
    "\1\u0107\6\14\20\0\2\14\3\0\2\14\1\351\25\14"+
    "\20\0\2\14\3\0\6\14\1\u0108\21\14\20\0\2\14"+
    "\3\0\21\14\1\u0109\6\14\20\0\2\14\3\0\17\14"+
    "\1\u010a\10\14\20\0\2\14\3\0\6\14\1\351\21\14"+
    "\20\0\2\14\3\0\16\14\1\215\11\14\20\0\2\14"+
    "\3\0\6\14\1\u010b\4\14\1\u010c\14\14\20\0\2\14"+
    "\3\0\16\14\1\361\11\14\20\0\2\14\3\0\13\14"+
    "\1\157\14\14\20\0\2\14\3\0\4\14\1\u010d\3\14"+
    "\1\211\17\14\14\0\1\224\2\0\52\224\2\225\1\0"+
    "\52\225\2\227\1\0\52\227\34\0\1\u010e\36\0\1\u010f"+
    "\74\0\1\55\27\0\1\55\72\0\1\u0110\44\0\1\u0111"+
    "\61\0\1\u0112\47\0\1\u0113\53\0\1\u0114\57\0\1\u0115"+
    "\44\0\1\u0116\7\0\1\u0117\63\0\1\u0118\40\0\1\u0119"+
    "\55\0\1\262\51\0\1\u011a\15\0\1\u011b\55\0\1\u011c"+
    "\34\0\1\u011d\14\0\2\271\45\0\1\u011e\66\0\1\u010f"+
    "\42\0\1\u011f\45\0\1\u0120\60\0\1\u0121\53\0\1\u0122"+
    "\65\0\1\u0123\40\0\1\u0124\7\0\1\u0125\5\0\1\u0126"+
    "\42\0\1\55\56\0\1\55\4\0\1\u0127\3\0\1\u0128"+
    "\42\0\1\u0129\13\0\1\u012a\35\0\1\55\60\0\1\u012b"+
    "\67\0\1\u012c\52\0\1\u012d\43\0\1\55\64\0\1\271"+
    "\44\0\1\u012e\4\0\1\u012f\57\0\1\u0114\51\0\1\234"+
    "\45\0\1\u0130\3\0\1\265\33\0\2\277\1\0\52\277"+
    "\2\301\1\0\52\301\34\0\1\u0131\36\0\1\u0132\74\0"+
    "\1\105\27\0\1\105\72\0\1\u0133\44\0\1\u0134\61\0"+
    "\1\u0135\47\0\1\u0136\53\0\1\u0137\57\0\1\u0138\44\0"+
    "\1\u0139\7\0\1\u013a\63\0\1\u013b\40\0\1\u013c\55\0"+
    "\1\334\51\0\1\u013d\15\0\1\u013e\55\0\1\u013f\34\0"+
    "\1\u0140\14\0\2\343\45\0\1\u0141\66\0\1\u0132\42\0"+
    "\1\u0142\45\0\1\u0143\60\0\1\u0144\53\0\1\u0145\65\0"+
    "\1\u0146\40\0\1\u0147\7\0\1\u0148\5\0\1\u0149\42\0"+
    "\1\105\56\0\1\105\4\0\1\u014a\3\0\1\u014b\42\0"+
    "\1\u014c\13\0\1\u014d\35\0\1\105\60\0\1\u014e\67\0"+
    "\1\u014f\52\0\1\u0150\43\0\1\105\64\0\1\343\44\0"+
    "\1\u0151\4\0\1\u0152\57\0\1\u0137\51\0\1\306\45\0"+
    "\1\u0153\3\0\1\337\37\0\2\14\3\0\3\14\1\u0154"+
    "\24\14\20\0\2\14\3\0\3\14\1\u0155\24\14\20\0"+
    "\2\14\3\0\3\14\1\351\24\14\20\0\2\14\3\0"+
    "\6\14\1\u0156\21\14\20\0\2\14\3\0\17\14\1\351"+
    "\10\14\20\0\2\14\3\0\1\14\1\u0157\26\14\20\0"+
    "\2\14\3\0\3\14\1\u0158\24\14\20\0\2\14\3\0"+
    "\23\14\1\351\4\14\20\0\2\14\3\0\20\14\1\u0159"+
    "\7\14\20\0\2\14\3\0\21\14\1\u015a\6\14\20\0"+
    "\2\14\3\0\4\14\1\u015b\23\14\20\0\2\14\3\0"+
    "\16\14\1\u015c\11\14\20\0\2\14\3\0\16\14\1\140"+
    "\11\14\20\0\2\14\3\0\17\14\1\u015d\10\14\20\0"+
    "\2\14\3\0\1\14\1\u015e\26\14\20\0\2\14\3\0"+
    "\10\14\1\u015f\17\14\20\0\2\14\3\0\20\14\1\u0160"+
    "\7\14\20\0\2\14\3\0\21\14\1\u0161\6\14\20\0"+
    "\2\14\3\0\20\14\1\u0162\7\14\20\0\2\14\3\0"+
    "\17\14\1\u0163\10\14\20\0\2\14\3\0\12\14\1\u0164"+
    "\15\14\20\0\2\14\3\0\14\14\1\354\13\14\20\0"+
    "\2\14\3\0\10\14\1\351\17\14\20\0\2\14\3\0"+
    "\6\14\1\u0165\21\14\20\0\2\14\3\0\1\14\1\u0166"+
    "\26\14\20\0\2\14\3\0\2\14\1\u0107\25\14\20\0"+
    "\2\14\3\0\7\14\1\u0167\20\14\20\0\2\14\3\0"+
    "\13\14\1\164\14\14\20\0\2\14\3\0\5\14\1\u0168"+
    "\22\14\20\0\2\14\3\0\3\14\1\u0157\24\14\20\0"+
    "\2\14\3\0\13\14\1\u0169\14\14\20\0\2\14\3\0"+
    "\3\14\1\u016a\1\u016b\23\14\20\0\2\14\3\0\15\14"+
    "\1\351\12\14\20\0\2\14\3\0\23\14\1\u016c\4\14"+
    "\20\0\2\14\3\0\17\14\1\157\10\14\20\0\2\14"+
    "\3\0\6\14\1\u0107\21\14\30\0\1\u016d\54\0\1\55"+
    "\57\0\1\u016e\65\0\1\55\36\0\1\u016f\56\0\1\u0170"+
    "\74\0\1\55\51\0\1\u0171\55\0\1\u0172\51\0\1\u0173"+
    "\54\0\1\u011f\55\0\1\u0174\36\0\1\u0175\63\0\1\u0176"+
    "\64\0\1\u0177\55\0\1\u0178\53\0\1\u0179\53\0\1\u017a"+
    "\51\0\1\u010f\50\0\1\55\52\0\1\u017b\47\0\1\u017c"+
    "\55\0\1\u012a\61\0\1\u017d\60\0\1\241\46\0\1\u017e"+
    "\52\0\1\u016f\64\0\1\u017f\44\0\1\u0180\1\u0181\65\0"+
    "\1\55\62\0\1\u0182\50\0\1\234\43\0\1\u012a\51\0"+
    "\1\u0183\54\0\1\105\57\0\1\u0184\65\0\1\105\36\0"+
    "\1\u0185\56\0\1\u0186\74\0\1\105\51\0\1\u0187\55\0"+
    "\1\u0188\51\0\1\u0189\54\0\1\u0142\55\0\1\u018a\36\0"+
    "\1\u018b\63\0\1\u018c\64\0\1\u018d\55\0\1\u018e\53\0"+
    "\1\u018f\53\0\1\u0190\51\0\1\u0132\50\0\1\105\52\0"+
    "\1\u0191\47\0\1\u0192\55\0\1\u014d\61\0\1\u0193\60\0"+
    "\1\313\46\0\1\u0194\52\0\1\u0185\64\0\1\u0195\44\0"+
    "\1\u0196\1\u0197\65\0\1\105\62\0\1\u0198\50\0\1\306"+
    "\43\0\1\u014d\41\0\2\14\3\0\4\14\1\u0164\23\14"+
    "\20\0\2\14\3\0\13\14\1\u0199\14\14\20\0\2\14"+
    "\3\0\13\14\1\u019a\14\14\20\0\2\14\3\0\13\14"+
    "\1\351\14\14\20\0\2\14\3\0\10\14\1\u019b\17\14"+
    "\20\0\2\14\3\0\6\14\1\361\21\14\20\0\2\14"+
    "\3\0\4\14\1\u019c\23\14\20\0\2\14\3\0\3\14"+
    "\1\u019d\24\14\20\0\2\14\3\0\6\14\1\u019e\21\14"+
    "\20\0\2\14\3\0\6\14\1\354\21\14\20\0\2\14"+
    "\3\0\16\14\1\354\11\14\20\0\2\14\3\0\20\14"+
    "\1\354\7\14\20\0\2\14\3\0\4\14\1\354\23\14"+
    "\20\0\2\14\3\0\4\14\1\367\23\14\20\0\2\14"+
    "\3\0\20\14\1\u0107\7\14\20\0\2\14\3\0\6\14"+
    "\1\164\21\14\20\0\2\14\3\0\3\14\1\u019f\24\14"+
    "\20\0\2\14\3\0\11\14\1\354\16\14\20\0\2\14"+
    "\3\0\17\14\1\u01a0\10\14\20\0\2\14\3\0\3\14"+
    "\1\366\24\14\20\0\2\14\3\0\7\14\1\u01a1\20\14"+
    "\20\0\2\14\3\0\10\14\1\211\17\14\20\0\2\14"+
    "\3\0\7\14\1\u01a2\12\14\1\351\5\14\20\0\2\14"+
    "\3\0\10\14\1\u01a3\17\14\40\0\1\u01a4\54\0\1\u01a5"+
    "\54\0\1\55\51\0\1\u01a6\52\0\1\u0114\52\0\1\u01a7"+
    "\56\0\1\u01a8\54\0\1\u010f\64\0\1\u010f\56\0\1\u010f"+
    "\40\0\1\u010f\54\0\1\u0119\70\0\1\u012a\42\0\1\241"+
    "\51\0\1\u011f\62\0\1\u010f\62\0\1\u01a9\40\0\1\u0118"+
    "\60\0\1\u01aa\55\0\1\265\53\0\1\u01ab\12\0\1\55"+
    "\42\0\1\u01ac\57\0\1\u01ad\54\0\1\u01ae\54\0\1\105"+
    "\51\0\1\u01af\52\0\1\u0137\52\0\1\u01b0\56\0\1\u01b1"+
    "\54\0\1\u0132\64\0\1\u0132\56\0\1\u0132\40\0\1\u0132"+
    "\54\0\1\u013c\70\0\1\u014d\42\0\1\313\51\0\1\u0142"+
    "\62\0\1\u0132\62\0\1\u01b2\40\0\1\u013b\60\0\1\u01b3"+
    "\55\0\1\337\53\0\1\u01b4\12\0\1\105\42\0\1\u01b5"+
    "\37\0\2\14\3\0\12\14\1\u01b6\15\14\20\0\2\14"+
    "\3\0\1\14\1\u01b7\12\14\1\u01b8\13\14\20\0\2\14"+
    "\3\0\2\14\1\u01b9\25\14\20\0\2\14\3\0\3\14"+
    "\1\u015d\24\14\20\0\2\14\3\0\5\14\1\u01ba\22\14"+
    "\20\0\2\14\3\0\13\14\1\u01bb\14\14\20\0\2\14"+
    "\3\0\4\14\1\u01bc\23\14\20\0\2\14\3\0\26\14"+
    "\1\u01bd\1\14\20\0\2\14\3\0\5\14\1\u01be\22\14"+
    "\20\0\2\14\3\0\17\14\1\u01bf\10\14\37\0\1\u01c0"+
    "\43\0\1\u01c1\12\0\1\u01c2\42\0\1\u011f\55\0\1\u0174"+
    "\64\0\1\u01c3\45\0\1\u01c4\76\0\1\u01c5\33\0\1\u01c6"+
    "\66\0\1\u01c7\47\0\1\u01c8\43\0\1\u01c9\12\0\1\u01ca"+
    "\42\0\1\u0142\55\0\1\u018a\64\0\1\u01cb\45\0\1\u01cc"+
    "\76\0\1\u01cd\33\0\1\u01ce\66\0\1\u01cf\30\0\2\14"+
    "\3\0\7\14\1\u015e\20\14\20\0\2\14\3\0\22\14"+
    "\1\351\5\14\20\0\2\14\3\0\5\14\1\215\22\14"+
    "\20\0\2\14\3\0\16\14\1\u0164\11\14\20\0\2\14"+
    "\3\0\6\14\1\u01d0\21\14\20\0\2\14\3\0\14\14"+
    "\1\u01b8\13\14\20\0\2\14\3\0\7\14\1\u01d1\20\14"+
    "\20\0\2\14\3\0\14\14\1\u015d\13\14\20\0\2\14"+
    "\3\0\17\14\1\u01d2\10\14\20\0\2\14\3\0\1\354"+
    "\27\14\34\0\1\u0175\67\0\1\55\37\0\1\271\63\0"+
    "\1\u01c2\47\0\1\u01d3\61\0\1\u0174\57\0\1\u01d4\35\0"+
    "\1\u010f\63\0\1\u018b\67\0\1\105\37\0\1\343\63\0"+
    "\1\u01ca\47\0\1\u01d5\61\0\1\u018a\57\0\1\u01d6\35\0"+
    "\1\u0132\47\0\2\14\3\0\7\14\1\u01d7\20\14\20\0"+
    "\2\14\3\0\27\14\1\354\20\0\2\14\3\0\6\14"+
    "\1\u01d8\21\14\54\0\1\u010f\33\0\1\u01d9\75\0\1\u0132"+
    "\33\0\1\u01da\41\0\2\14\3\0\1\14\1\u01db\26\14"+
    "\20\0\2\14\3\0\7\14\1\u01dc\20\14\34\0\1\u01dd"+
    "\54\0\1\u01de\40\0\2\14\3\0\10\14\1\u0164\17\14"+
    "\20\0\2\14\3\0\1\14\1\u0100\26\14\26\0\1\u0122"+
    "\54\0\1\u0145\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20115];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\31\1\13\11\27\1\1\11\33\1\1\11"+
    "\3\1\2\0\1\11\3\0\52\1\5\0\1\1\51\0"+
    "\1\1\44\0\45\1\106\0\31\1\54\0\13\1\22\0"+
    "\12\1\20\0\3\1\4\0\2\1\2\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _CoocooLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  protected abstract void readJavaScript(int state) throws java.io.IOException;
  protected abstract void readMultilineJavaScript(int state) throws java.io.IOException;


  _CoocooLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CoocooLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { yybegin(YYINITIAL); return PUSHER;
          }
        case 27: break;
        case 6: 
          { yybegin(YYINITIAL); return SUBCOOCOO;
          }
        case 28: break;
        case 26: 
          { yybegin(CLASS); return KEYWORD;
          }
        case 29: break;
        case 25: 
          { return COMMENT;
          }
        case 30: break;
        case 10: 
          { yybegin(TYPE); return TYPIFICATION;
          }
        case 31: break;
        case 23: 
          { yybegin(AFTER); return KEYWORD;
          }
        case 32: break;
        case 20: 
          { yybegin(YYINITIAL); return NULLABLE;
          }
        case 33: break;
        case 21: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 34: break;
        case 16: 
          { return JAVASCRIPT;
          }
        case 35: break;
        case 15: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(AFTER); return JAVASCRIPT;
          }
        case 36: break;
        case 3: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 37: break;
        case 12: 
          { yybegin(AFTER); return TYPIFICATION;
          }
        case 38: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 39: break;
        case 7: 
          { yybegin(AFTER); return SUBCOOCOO;
          }
        case 40: break;
        case 18: 
          { return WHITE_SPACE;
          }
        case 41: break;
        case 22: 
          { yybegin(AFTER); return STRING;
          }
        case 42: break;
        case 8: 
          { yybegin(GETTER); return VARIABLE;
          }
        case 43: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 44: break;
        case 5: 
          { return PUSHER;
          }
        case 45: break;
        case 13: 
          { yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 46: break;
        case 14: 
          { return JAVASCRIPT_END;
          }
        case 47: break;
        case 4: 
          { yybegin(AFTER); return IDENTIFIER;
          }
        case 48: break;
        case 24: 
          { yybegin(IN_JAVASCRIPT2); readMultilineJavaScript(YYINITIAL); return KEYWORD;
          }
        case 49: break;
        case 19: 
          { yybegin(AFTER); return COOCLASS;
          }
        case 50: break;
        case 9: 
          { yybegin(GETTER); return PROPERTY;
          }
        case 51: break;
        case 17: 
          { yybegin(AFTER); return ACCESSOR;
          }
        case 52: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
