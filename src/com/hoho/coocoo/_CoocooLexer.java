/* The following code was generated by JFlex 1.4.3 on 3/6/14 1:32 PM */

package com.hoho.coocoo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.hoho.coocoo.psi.CoocooTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/6/14 1:32 PM from the specification file
 * <tt>/Users/hoho/Work/coocooPlugin/src/com/hoho/coocoo/Coocoo.flex</tt>
 */
abstract class _CoocooLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int GETTER = 8;
  public static final int IN_JAVASCRIPT = 2;
  public static final int IN_JAVASCRIPT2 = 4;
  public static final int TYPE = 14;
  public static final int IN_BAD = 16;
  public static final int YYINITIAL = 0;
  public static final int AFTER = 6;
  public static final int NAME = 12;
  public static final int CLASS = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\6"+
    "\1\0\1\45\2\0\1\10\1\52\1\53\1\0\1\42\3\0\1\41"+
    "\12\5\2\0\1\47\1\0\1\50\1\51\1\46\32\4\1\43\1\7"+
    "\1\44\1\0\1\4\1\0\1\33\1\37\1\16\1\13\1\14\1\36"+
    "\1\34\1\30\1\20\1\35\1\4\1\15\1\11\1\21\1\12\1\31"+
    "\1\4\1\24\1\27\1\17\1\25\1\22\1\23\1\26\1\32\1\40"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\2\1\23\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\27\16\27\17\1\20\1\21\1\22\1\23\1\4"+
    "\1\24\3\25\2\0\1\26\3\0\3\4\1\27\44\4"+
    "\1\30\2\4\1\31\5\0\1\16\47\0\1\17\42\0"+
    "\1\27\35\4\1\32\13\4\106\0\21\4\1\33\11\4"+
    "\54\0\7\4\1\33\5\4\22\0\13\4\20\0\4\4"+
    "\4\0\2\4\2\0\2\4\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c"+
    "\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u05d8\0\u018c\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u05d8\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u018c"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u05d8\0\u023c\0\u018c\0\u0e9c\0\u0268"+
    "\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc"+
    "\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c"+
    "\0\u15a8\0\u0210\0\u15d4\0\u1600\0\u162c\0\u065c\0\u1658\0\u0688"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u09f8\0\u1ce0\0\u0a24"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40"+
    "\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0"+
    "\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100"+
    "\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260"+
    "\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u0210\0\u2368\0\u2394"+
    "\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4"+
    "\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654"+
    "\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4"+
    "\0\u27e0\0\u280c\0\u2838\0\u0210\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8"+
    "\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08"+
    "\0\u2d34\0\u0948\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c"+
    "\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c"+
    "\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc"+
    "\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c"+
    "\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u0ce4\0\u3338\0\u3364\0\u3390"+
    "\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0"+
    "\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650"+
    "\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0"+
    "\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u0210\0\u38e4"+
    "\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44"+
    "\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4"+
    "\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac\0\u3cd8\0\u3d04"+
    "\0\u3d30\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c\0\u3e38\0\u3e64"+
    "\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4"+
    "\0\u3ff0\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc\0\u40f8\0\u4124"+
    "\0\u4150\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258\0\u4284"+
    "\0\u42b0\0\u42dc\0\u4308\0\u0dec\0\u4334\0\u4360\0\u438c\0\u43b8"+
    "\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0\0\u44ec\0\u4518"+
    "\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4\0\u4620\0\u464c\0\u4678"+
    "\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u4754\0\u4780\0\u47ac\0\u47d8"+
    "\0\u4804\0\u4830\0\u485c\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938"+
    "\0\u4964\0\u4990\0\u49bc\0\u49e8\0\u4a14\0\u4a40\0\u4a6c\0\u4a98"+
    "\0\u4ac4\0\u4af0\0\u4b1c\0\u4b48\0\u4b74\0\u4ba0\0\u4bcc\0\u4bf8"+
    "\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c\0\u4d58"+
    "\0\u4d84\0\u4db0\0\u4ddc\0\u4e08\0\u4e34\0\u4e60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\1\12\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\15"+
    "\1\27\1\30\1\31\1\32\1\33\1\15\1\34\1\35"+
    "\1\36\1\15\1\37\1\40\1\41\1\42\2\15\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\12"+
    "\1\53\1\54\1\55\2\56\1\57\2\55\1\60\1\55"+
    "\1\61\1\55\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\55\1\70\1\71\1\72\1\73\1\74\1\55\1\75"+
    "\1\76\1\77\1\55\1\100\1\55\1\101\1\102\2\55"+
    "\1\103\12\55\1\104\2\105\1\106\2\104\1\107\1\104"+
    "\1\110\1\104\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\104\1\117\1\120\1\121\1\122\1\123\1\104\1\124"+
    "\1\125\1\126\1\104\1\127\1\104\1\130\1\131\2\104"+
    "\1\132\12\104\1\12\2\13\1\14\35\12\1\43\2\12"+
    "\1\46\2\12\1\51\1\52\2\12\1\54\1\12\2\13"+
    "\1\14\1\133\4\12\30\133\1\43\11\12\1\54\1\12"+
    "\2\13\1\134\1\135\4\12\30\135\1\43\1\12\1\45"+
    "\1\46\1\47\1\50\4\12\1\54\1\12\2\13\1\134"+
    "\1\136\4\12\30\136\1\43\1\12\1\45\1\46\1\47"+
    "\1\50\3\12\1\53\1\54\1\12\2\13\1\134\1\15"+
    "\4\12\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\15\1\27\1\30\1\31\1\32\1\33\1\15\1\34"+
    "\1\35\1\36\1\15\1\37\1\40\1\137\1\42\2\15"+
    "\1\43\7\12\1\140\1\12\1\54\1\141\2\13\1\142"+
    "\35\141\1\143\12\141\55\0\2\13\54\0\1\14\35\0"+
    "\1\144\16\0\2\15\3\0\30\15\13\0\1\145\2\0"+
    "\3\145\1\146\1\147\44\145\1\150\2\0\4\150\1\151"+
    "\1\146\43\150\4\0\2\15\3\0\1\15\1\152\1\15"+
    "\1\153\24\15\17\0\2\15\3\0\6\15\1\154\1\15"+
    "\1\155\14\15\1\156\2\15\17\0\2\15\3\0\1\15"+
    "\1\157\1\15\1\160\16\15\1\161\5\15\17\0\2\15"+
    "\3\0\13\15\1\162\1\15\1\163\4\15\1\164\5\15"+
    "\17\0\2\15\3\0\3\15\1\165\24\15\17\0\2\15"+
    "\3\0\1\15\1\166\2\15\1\167\6\15\1\170\3\15"+
    "\1\171\2\15\1\172\5\15\17\0\2\15\3\0\1\15"+
    "\1\173\1\15\1\174\7\15\1\175\3\15\1\176\1\15"+
    "\1\177\6\15\17\0\2\15\3\0\1\15\1\200\26\15"+
    "\17\0\2\15\3\0\7\15\1\201\12\15\1\202\5\15"+
    "\17\0\2\15\3\0\17\15\1\203\10\15\17\0\2\15"+
    "\3\0\1\15\1\204\1\15\1\205\24\15\17\0\2\15"+
    "\3\0\13\15\1\206\14\15\17\0\2\15\3\0\3\15"+
    "\1\207\10\15\1\210\13\15\17\0\2\15\3\0\22\15"+
    "\1\211\5\15\17\0\2\15\3\0\1\15\1\212\11\15"+
    "\1\213\6\15\1\214\5\15\17\0\2\15\3\0\2\15"+
    "\1\215\3\15\1\216\11\15\1\217\3\15\1\220\3\15"+
    "\17\0\2\15\3\0\3\15\1\221\24\15\17\0\2\15"+
    "\3\0\16\15\1\222\11\15\17\0\2\15\3\0\1\15"+
    "\1\223\5\15\1\224\20\15\54\0\1\225\13\0\2\56"+
    "\54\0\1\57\35\0\1\144\12\0\1\226\2\0\3\226"+
    "\1\55\1\227\44\226\1\230\2\0\4\230\1\231\1\55"+
    "\43\230\17\0\1\232\1\0\1\233\14\0\1\234\27\0"+
    "\1\235\1\0\1\236\16\0\1\237\44\0\1\240\1\0"+
    "\1\241\4\0\1\242\34\0\1\243\51\0\1\244\2\0"+
    "\1\245\6\0\1\246\3\0\1\247\35\0\1\250\1\0"+
    "\1\251\7\0\1\252\3\0\1\253\1\0\1\254\33\0"+
    "\1\255\74\0\1\256\50\0\1\257\35\0\1\260\1\0"+
    "\1\261\63\0\1\262\43\0\1\263\10\0\1\264\61\0"+
    "\1\265\32\0\1\266\20\0\1\267\33\0\1\270\3\0"+
    "\1\271\11\0\1\272\3\0\1\273\45\0\1\55\36\0"+
    "\1\274\5\0\1\275\34\0\2\105\54\0\1\106\35\0"+
    "\1\144\12\0\1\276\2\0\3\276\1\104\1\277\44\276"+
    "\1\300\2\0\4\300\1\301\1\104\43\300\17\0\1\302"+
    "\1\0\1\303\14\0\1\304\27\0\1\305\1\0\1\306"+
    "\16\0\1\307\44\0\1\310\1\0\1\311\4\0\1\312"+
    "\34\0\1\313\51\0\1\314\2\0\1\315\6\0\1\316"+
    "\3\0\1\317\35\0\1\320\1\0\1\321\7\0\1\322"+
    "\3\0\1\323\1\0\1\324\33\0\1\325\74\0\1\326"+
    "\50\0\1\327\35\0\1\330\1\0\1\331\63\0\1\332"+
    "\43\0\1\333\10\0\1\334\61\0\1\335\32\0\1\336"+
    "\20\0\1\337\33\0\1\340\3\0\1\341\11\0\1\342"+
    "\3\0\1\343\45\0\1\104\36\0\1\344\5\0\1\345"+
    "\37\0\2\133\3\0\30\133\16\0\1\134\35\0\1\144"+
    "\16\0\2\135\3\0\30\135\17\0\2\136\3\0\30\136"+
    "\17\0\2\15\3\0\16\15\1\346\11\15\13\0\1\141"+
    "\2\0\52\141\2\0\1\142\35\141\1\143\13\141\2\0"+
    "\36\141\1\225\12\141\2\145\1\0\51\145\2\150\1\0"+
    "\51\150\4\0\2\15\3\0\2\15\1\347\25\15\17\0"+
    "\2\15\3\0\6\15\1\350\21\15\17\0\2\15\3\0"+
    "\17\15\1\351\10\15\17\0\2\15\3\0\5\15\1\352"+
    "\22\15\17\0\2\15\3\0\25\15\1\346\2\15\17\0"+
    "\2\15\3\0\1\346\27\15\17\0\2\15\3\0\16\15"+
    "\1\353\11\15\17\0\2\15\3\0\6\15\1\354\21\15"+
    "\17\0\2\15\3\0\13\15\1\355\14\15\17\0\2\15"+
    "\3\0\6\15\1\356\21\15\17\0\2\15\3\0\5\15"+
    "\1\357\22\15\17\0\2\15\3\0\10\15\1\360\17\15"+
    "\17\0\2\15\3\0\1\361\3\15\1\362\3\15\1\363"+
    "\17\15\17\0\2\15\3\0\22\15\1\364\5\15\17\0"+
    "\2\15\3\0\3\15\1\365\24\15\17\0\2\15\3\0"+
    "\1\15\1\366\20\15\1\367\5\15\17\0\2\15\3\0"+
    "\4\15\1\370\23\15\17\0\2\15\3\0\23\15\1\371"+
    "\4\15\17\0\2\15\3\0\1\372\14\15\2\373\11\15"+
    "\17\0\2\15\3\0\7\15\1\374\20\15\17\0\2\15"+
    "\3\0\7\15\1\137\20\15\17\0\2\15\3\0\20\15"+
    "\1\352\7\15\17\0\2\15\3\0\1\375\27\15\17\0"+
    "\2\15\3\0\3\15\1\376\24\15\17\0\2\15\3\0"+
    "\4\15\1\377\23\15\17\0\2\15\3\0\3\15\1\u0100"+
    "\24\15\17\0\2\15\3\0\14\15\1\u0101\13\15\17\0"+
    "\2\15\3\0\1\u0102\7\15\1\u0103\5\15\1\40\11\15"+
    "\17\0\2\15\3\0\4\15\1\346\23\15\17\0\2\15"+
    "\3\0\6\15\1\u0104\4\15\1\u0105\6\15\1\u0106\5\15"+
    "\17\0\2\15\3\0\5\15\1\u0107\12\15\1\u0108\7\15"+
    "\17\0\2\15\3\0\16\15\1\357\11\15\17\0\2\15"+
    "\3\0\16\15\1\373\11\15\17\0\2\15\3\0\1\15"+
    "\1\u0109\26\15\17\0\2\15\3\0\6\15\1\u010a\4\15"+
    "\1\u010b\14\15\17\0\2\15\3\0\2\15\1\346\25\15"+
    "\17\0\2\15\3\0\6\15\1\u010c\21\15\17\0\2\15"+
    "\3\0\20\15\1\u010d\7\15\17\0\2\15\3\0\22\15"+
    "\1\u010e\5\15\17\0\2\15\3\0\6\15\1\u0104\21\15"+
    "\17\0\2\15\3\0\13\15\1\157\14\15\17\0\2\15"+
    "\3\0\4\15\1\u010f\3\15\1\215\17\15\13\0\1\225"+
    "\2\0\51\225\2\226\1\0\51\226\2\230\1\0\51\230"+
    "\30\0\1\u0110\41\0\1\u0111\73\0\1\55\26\0\1\55"+
    "\71\0\1\u0112\43\0\1\u0113\60\0\1\u0114\46\0\1\u0115"+
    "\52\0\1\u0116\56\0\1\u0117\43\0\1\u0118\7\0\1\u0119"+
    "\65\0\1\u011a\34\0\1\u011b\51\0\1\u011c\20\0\1\u011d"+
    "\54\0\1\u011e\30\0\1\u011f\14\0\2\u0120\44\0\1\u0121"+
    "\53\0\1\u0122\64\0\1\u0111\33\0\1\u0123\57\0\1\u0124"+
    "\52\0\1\u0125\64\0\1\u0126\37\0\1\u0127\7\0\1\u0128"+
    "\47\0\1\55\62\0\1\u0129\6\0\1\u012a\36\0\1\u012b"+
    "\12\0\1\u012c\51\0\1\u0116\53\0\1\u0120\43\0\1\u012d"+
    "\4\0\1\u012e\42\0\1\55\57\0\1\u012f\65\0\1\u0130"+
    "\55\0\1\u0131\44\0\1\235\44\0\1\u0132\3\0\1\270"+
    "\32\0\2\276\1\0\51\276\2\300\1\0\51\300\30\0"+
    "\1\u0133\41\0\1\u0134\73\0\1\104\26\0\1\104\71\0"+
    "\1\u0135\43\0\1\u0136\60\0\1\u0137\46\0\1\u0138\52\0"+
    "\1\u0139\56\0\1\u013a\43\0\1\u013b\7\0\1\u013c\65\0"+
    "\1\u013d\34\0\1\u013e\51\0\1\u013f\20\0\1\u0140\54\0"+
    "\1\u0141\30\0\1\u0142\14\0\2\u0143\44\0\1\u0144\53\0"+
    "\1\u0145\64\0\1\u0134\33\0\1\u0146\57\0\1\u0147\52\0"+
    "\1\u0148\64\0\1\u0149\37\0\1\u014a\7\0\1\u014b\47\0"+
    "\1\104\62\0\1\u014c\6\0\1\u014d\36\0\1\u014e\12\0"+
    "\1\u014f\51\0\1\u0139\53\0\1\u0143\43\0\1\u0150\4\0"+
    "\1\u0151\42\0\1\104\57\0\1\u0152\65\0\1\u0153\55\0"+
    "\1\u0154\44\0\1\305\44\0\1\u0155\3\0\1\340\36\0"+
    "\2\15\3\0\3\15\1\u0156\24\15\17\0\2\15\3\0"+
    "\17\15\1\u0157\10\15\17\0\2\15\3\0\3\15\1\u0158"+
    "\24\15\17\0\2\15\3\0\3\15\1\346\24\15\17\0"+
    "\2\15\3\0\6\15\1\u0159\21\15\17\0\2\15\3\0"+
    "\22\15\1\346\5\15\17\0\2\15\3\0\1\15\1\u015a"+
    "\26\15\17\0\2\15\3\0\3\15\1\u015b\24\15\17\0"+
    "\2\15\3\0\17\15\1\346\10\15\17\0\2\15\3\0"+
    "\23\15\1\u015c\4\15\17\0\2\15\3\0\20\15\1\u015d"+
    "\7\15\17\0\2\15\3\0\4\15\1\u015e\23\15\17\0"+
    "\2\15\3\0\16\15\1\u015f\11\15\17\0\2\15\3\0"+
    "\16\15\1\137\11\15\17\0\2\15\3\0\22\15\1\u0160"+
    "\5\15\17\0\2\15\3\0\1\15\1\u0161\26\15\17\0"+
    "\2\15\3\0\10\15\1\u0162\17\15\17\0\2\15\3\0"+
    "\4\15\1\u0104\23\15\17\0\2\15\3\0\23\15\1\u0163"+
    "\4\15\17\0\2\15\3\0\20\15\1\u0164\7\15\17\0"+
    "\2\15\3\0\6\15\1\346\21\15\17\0\2\15\3\0"+
    "\23\15\1\u0165\4\15\17\0\2\15\3\0\22\15\1\u0166"+
    "\5\15\17\0\2\15\3\0\12\15\1\u0167\15\15\17\0"+
    "\2\15\3\0\14\15\1\352\13\15\17\0\2\15\3\0"+
    "\10\15\1\346\17\15\17\0\2\15\3\0\6\15\1\u0168"+
    "\21\15\17\0\2\15\3\0\1\15\1\u0169\26\15\17\0"+
    "\2\15\3\0\2\15\1\u0108\25\15\17\0\2\15\3\0"+
    "\7\15\1\u016a\20\15\17\0\2\15\3\0\13\15\1\164"+
    "\14\15\17\0\2\15\3\0\5\15\1\u016b\22\15\17\0"+
    "\2\15\3\0\3\15\1\u015a\24\15\17\0\2\15\3\0"+
    "\20\15\1\u016c\7\15\17\0\2\15\3\0\17\15\1\u016d"+
    "\10\15\17\0\2\15\3\0\22\15\1\157\5\15\17\0"+
    "\2\15\3\0\13\15\1\u016e\14\15\17\0\2\15\3\0"+
    "\3\15\1\u016f\1\u0170\23\15\17\0\2\15\3\0\15\15"+
    "\1\346\12\15\17\0\2\15\3\0\6\15\1\u0108\21\15"+
    "\27\0\1\u0171\53\0\1\55\56\0\1\u0172\67\0\1\55"+
    "\32\0\1\u0173\55\0\1\u0174\67\0\1\55\57\0\1\u0175"+
    "\50\0\1\u0176\51\0\1\u0177\53\0\1\u0122\57\0\1\u0178"+
    "\32\0\1\u0179\62\0\1\u017a\66\0\1\u017b\50\0\1\u017c"+
    "\41\0\1\55\70\0\1\u017d\52\0\1\u017e\45\0\1\u0111"+
    "\47\0\1\55\51\0\1\u017f\46\0\1\u0180\54\0\1\u012c"+
    "\60\0\1\u0181\57\0\1\242\45\0\1\u0182\51\0\1\u0173"+
    "\67\0\1\u0183\56\0\1\235\44\0\1\u0184\43\0\1\u0185"+
    "\1\u0186\64\0\1\55\44\0\1\u012c\50\0\1\u0187\53\0"+
    "\1\104\56\0\1\u0188\67\0\1\104\32\0\1\u0189\55\0"+
    "\1\u018a\67\0\1\104\57\0\1\u018b\50\0\1\u018c\51\0"+
    "\1\u018d\53\0\1\u0145\57\0\1\u018e\32\0\1\u018f\62\0"+
    "\1\u0190\66\0\1\u0191\50\0\1\u0192\41\0\1\104\70\0"+
    "\1\u0193\52\0\1\u0194\45\0\1\u0134\47\0\1\104\51\0"+
    "\1\u0195\46\0\1\u0196\54\0\1\u014f\60\0\1\u0197\57\0"+
    "\1\312\45\0\1\u0198\51\0\1\u0189\67\0\1\u0199\56\0"+
    "\1\305\44\0\1\u019a\43\0\1\u019b\1\u019c\64\0\1\104"+
    "\44\0\1\u014f\40\0\2\15\3\0\4\15\1\u0167\23\15"+
    "\17\0\2\15\3\0\1\15\1\u019d\26\15\17\0\2\15"+
    "\3\0\13\15\1\u019e\14\15\17\0\2\15\3\0\13\15"+
    "\1\u019f\14\15\17\0\2\15\3\0\13\15\1\346\14\15"+
    "\17\0\2\15\3\0\10\15\1\u01a0\17\15\17\0\2\15"+
    "\3\0\6\15\1\357\21\15\17\0\2\15\3\0\4\15"+
    "\1\u01a1\23\15\17\0\2\15\3\0\3\15\1\u01a2\24\15"+
    "\17\0\2\15\3\0\6\15\1\u01a3\21\15\17\0\2\15"+
    "\3\0\6\15\1\352\21\15\17\0\2\15\3\0\16\15"+
    "\1\352\11\15\17\0\2\15\3\0\23\15\1\352\4\15"+
    "\17\0\2\15\3\0\4\15\1\352\23\15\17\0\2\15"+
    "\3\0\4\15\1\365\23\15\17\0\2\15\3\0\23\15"+
    "\1\u0108\4\15\17\0\2\15\3\0\6\15\1\164\21\15"+
    "\17\0\2\15\3\0\3\15\1\u01a4\24\15\17\0\2\15"+
    "\3\0\11\15\1\352\16\15\17\0\2\15\3\0\22\15"+
    "\1\u01a5\5\15\17\0\2\15\3\0\3\15\1\364\24\15"+
    "\17\0\2\15\3\0\3\15\1\u01a6\24\15\17\0\2\15"+
    "\3\0\10\15\1\u01a7\17\15\17\0\2\15\3\0\7\15"+
    "\1\u01a8\20\15\17\0\2\15\3\0\10\15\1\215\17\15"+
    "\17\0\2\15\3\0\7\15\1\u01a9\11\15\1\346\6\15"+
    "\37\0\1\u01aa\53\0\1\u01ab\53\0\1\55\50\0\1\u01ac"+
    "\51\0\1\u0116\51\0\1\u01ad\55\0\1\u01ae\53\0\1\u0111"+
    "\63\0\1\u0111\60\0\1\u0111\34\0\1\u0111\53\0\1\u011b"+
    "\72\0\1\u012c\36\0\1\242\50\0\1\u0122\61\0\1\u0111"+
    "\64\0\1\u01af\34\0\1\u011a\60\0\1\u01b0\52\0\1\u01b1"+
    "\54\0\1\270\52\0\1\u01b2\11\0\1\55\45\0\1\u01b3"+
    "\53\0\1\u01b4\53\0\1\104\50\0\1\u01b5\51\0\1\u0139"+
    "\51\0\1\u01b6\55\0\1\u01b7\53\0\1\u0134\63\0\1\u0134"+
    "\60\0\1\u0134\34\0\1\u0134\53\0\1\u013e\72\0\1\u014f"+
    "\36\0\1\312\50\0\1\u0145\61\0\1\u0134\64\0\1\u01b8"+
    "\34\0\1\u013d\60\0\1\u01b9\52\0\1\u01ba\54\0\1\340"+
    "\52\0\1\u01bb\11\0\1\104\25\0\2\15\3\0\2\15"+
    "\1\u0104\25\15\17\0\2\15\3\0\12\15\1\u01bc\15\15"+
    "\17\0\2\15\3\0\1\15\1\u01bd\12\15\1\u01be\13\15"+
    "\17\0\2\15\3\0\2\15\1\u01bf\25\15\17\0\2\15"+
    "\3\0\3\15\1\u0160\24\15\17\0\2\15\3\0\5\15"+
    "\1\u01c0\22\15\17\0\2\15\3\0\13\15\1\u01c1\14\15"+
    "\17\0\2\15\3\0\4\15\1\u01c2\23\15\17\0\2\15"+
    "\3\0\13\15\1\u01c3\14\15\17\0\2\15\3\0\22\15"+
    "\1\u01c4\5\15\17\0\2\15\3\0\26\15\1\u01c5\1\15"+
    "\17\0\2\15\3\0\5\15\1\u01c6\22\15\36\0\1\u01c7"+
    "\42\0\1\u01c8\12\0\1\u01c9\41\0\1\u0122\54\0\1\u0178"+
    "\63\0\1\u01ca\44\0\1\u01cb\71\0\1\u01cc\57\0\1\u01cd"+
    "\32\0\1\u01ce\60\0\1\u01cf\42\0\1\u01d0\12\0\1\u01d1"+
    "\41\0\1\u0145\54\0\1\u018e\63\0\1\u01d2\44\0\1\u01d3"+
    "\71\0\1\u01d4\57\0\1\u01d5\32\0\1\u01d6\41\0\2\15"+
    "\3\0\7\15\1\u0161\20\15\17\0\2\15\3\0\21\15"+
    "\1\346\6\15\17\0\2\15\3\0\5\15\1\373\22\15"+
    "\17\0\2\15\3\0\16\15\1\u0167\11\15\17\0\2\15"+
    "\3\0\6\15\1\u01d7\21\15\17\0\2\15\3\0\14\15"+
    "\1\u01be\13\15\17\0\2\15\3\0\7\15\1\u01d8\20\15"+
    "\17\0\2\15\3\0\6\15\1\u01d9\21\15\17\0\2\15"+
    "\3\0\1\352\27\15\17\0\2\15\3\0\14\15\1\u0160"+
    "\13\15\17\0\2\15\3\0\22\15\1\u01da\5\15\33\0"+
    "\1\u0179\65\0\1\55\37\0\1\u0120\62\0\1\u01c9\46\0"+
    "\1\u01db\44\0\1\u0111\67\0\1\u0178\61\0\1\u01dc\40\0"+
    "\1\u018f\65\0\1\104\37\0\1\u0143\62\0\1\u01d1\46\0"+
    "\1\u01dd\44\0\1\u0134\67\0\1\u018e\61\0\1\u01de\24\0"+
    "\2\15\3\0\7\15\1\u01df\20\15\17\0\2\15\3\0"+
    "\27\15\1\352\17\0\2\15\3\0\21\15\1\u0104\6\15"+
    "\17\0\2\15\3\0\6\15\1\u01e0\21\15\53\0\1\u0111"+
    "\32\0\1\u01e1\74\0\1\u0134\32\0\1\u01e2\40\0\2\15"+
    "\3\0\1\15\1\u01e3\26\15\17\0\2\15\3\0\7\15"+
    "\1\u01e4\20\15\33\0\1\u01e5\53\0\1\u01e6\37\0\2\15"+
    "\3\0\10\15\1\u0167\17\15\17\0\2\15\3\0\1\15"+
    "\1\u0100\26\15\25\0\1\u0125\53\0\1\u0148\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20108];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\31\1\12\11\26\1\1\11\33\1\1\11"+
    "\3\1\2\0\1\11\3\0\54\1\5\0\1\1\47\0"+
    "\1\1\42\0\52\1\106\0\33\1\54\0\15\1\22\0"+
    "\13\1\20\0\4\1\4\0\2\1\2\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  _CoocooLexer() {
    this((java.io.Reader)null);
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  protected abstract void readJavaScript(int state) throws java.io.IOException;
  protected abstract void readMultilineJavaScript(int state) throws java.io.IOException;


  _CoocooLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CoocooLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(GETTER); return PROPERTY_GETTER;
          }
        case 28: break;
        case 6: 
          { yybegin(YYINITIAL); return SUBCOOCOO;
          }
        case 29: break;
        case 27: 
          { yybegin(CLASS); return KEYWORD;
          }
        case 30: break;
        case 25: 
          { return COMMENT;
          }
        case 31: break;
        case 10: 
          { yybegin(TYPE); return TYPIFICATION;
          }
        case 32: break;
        case 23: 
          { yybegin(AFTER); return KEYWORD;
          }
        case 33: break;
        case 8: 
          { yybegin(GETTER); return VARIABLE_GETTER;
          }
        case 34: break;
        case 20: 
          { yybegin(YYINITIAL); return NULLABLE;
          }
        case 35: break;
        case 21: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 36: break;
        case 15: 
          { return JAVASCRIPT;
          }
        case 37: break;
        case 14: 
          { yybegin(IN_JAVASCRIPT2); readJavaScript(AFTER); return JAVASCRIPT;
          }
        case 38: break;
        case 3: 
          { yybegin(YYINITIAL); return WHITE_SPACE;
          }
        case 39: break;
        case 11: 
          { yybegin(AFTER); return TYPIFICATION;
          }
        case 40: break;
        case 2: 
          { yybegin(YYINITIAL); return CRLF;
          }
        case 41: break;
        case 7: 
          { yybegin(AFTER); return SUBCOOCOO;
          }
        case 42: break;
        case 17: 
          { return WHITE_SPACE;
          }
        case 43: break;
        case 22: 
          { yybegin(AFTER); return STRING;
          }
        case 44: break;
        case 1: 
          { yybegin(IN_BAD); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 45: break;
        case 19: 
          { yybegin(AFTER); return COONAME;
          }
        case 46: break;
        case 26: 
          { yybegin(NAME); return KEYWORD;
          }
        case 47: break;
        case 5: 
          { return PUSHER;
          }
        case 48: break;
        case 12: 
          { yybegin(IN_JAVASCRIPT); return JAVASCRIPT_BEGIN;
          }
        case 49: break;
        case 16: 
          { yybegin(AFTER); return VARIABLE;
          }
        case 50: break;
        case 13: 
          { return JAVASCRIPT_END;
          }
        case 51: break;
        case 4: 
          { yybegin(AFTER); return IDENTIFIER;
          }
        case 52: break;
        case 24: 
          { yybegin(IN_JAVASCRIPT2); readMultilineJavaScript(YYINITIAL); return KEYWORD;
          }
        case 53: break;
        case 18: 
          { yybegin(AFTER); return COOCLASS;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
